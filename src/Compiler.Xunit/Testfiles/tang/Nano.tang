import AllRegisters
bool INPUT = false
bool OUTPUT = true
bool PULLUP = true
bool NO_PULLUP = false
bool HIGH = true
bool LOW = false

nothing INT0_enable()
    EIMSK{0} = true

nothing INT0_init(uint8 edge)
    INT0_enable()
    if(edge ==  INTERRUPT_LOW)
        EICRA{0} = false
        EICRA{1} = false
    else if(edge == ANY_EDGE)
        EICRA{0} = true
        EICRA{1} = false
    else if(edge == RISING_EDGE)
        EICRA{0} = true
        EICRA{1} = true
    else if(edge == FALLING_EDGE)
        EICRA{0} = false
        EICRA{1} = true
    DDRD{INT0} = false
    enableinterrupts()

nothing delay(uint32 ms)
    ms = ms * 16000 / 33
    while(ms > 0)   
        ms = ms - 1

bool DigitalRead(int8 pin)
    if(pin < 0)
        return false
    else if(pin <= 7)
        return PIND{pin}
    else if(pin <= 13)
        return PINB{pin - 8}
    else if(pin <= 20)
        return PINC{pin - 14}

nothing SetAnalogMode(bool mode) // True = analog, false = digital
    ADCSRA{7} = mode
    if(mode)
        // ADC Frekuency Prescaler division: 128 = 125 khz at 16 Mhz
        ADCSRA{0} = true
        ADCSRA{1} = true
        ADCSRA{2} = true
        // Auto-update
        ADCSRA{5} = true

nothing PinModeA(int8 pin, bool mode)
    ADMUX{5} = false
    ADMUX{6} = true
    ADMUX{7} = false // Left Adjust Result
    if(pin < 8 or pin >= 0)
        DDRC{pin} = mode

uint16 AnalogRead(int8 pin)
    if(ADCSRA{7})
        // Set Multiplexer
        if(pin % 2 == 1)
            ADMUX{0} = true            
        else
            ADMUX{0} = false
        if(pin % 4 == 1)
            ADMUX{1} = true
        else
            ADMUX{1} = false
        if(pin % 8 == 1)
            ADMUX{2} = true
        else
            ADMUX{2} = false
        ADCSRA{6} = true
        while(ADCSRA{4} == false) // Set to 1 when ADC is updated
            // Do nothing
        return ADC()
    else
        if(DigitalRead(pin+14))
            return 1
        return 0

int8 PinModeD(int8 pin, bool mode)
    if(pin <= 7)
        DDRD{pin} = mode
        return 0
    if(pin <= 13)
        DDRB{pin-8} = mode
        return 0


int8 DigitalWrite(uint8 pin, bool value)
    if(pin < 0)
        return 0
    else if(pin <= 7)
        PORTD{pin} = value
    else if(pin <= 13)
        PORTB{pin - 8} = value
    else if(pin <= 20)
        PORTC{pin - 14} = value

int8 DigitalFlip(uint8 pin)
    if(pin < 0)
        return 0
    else if(pin <= 7)
        PORTD{pin} = !PORTD{pin}
    else if(pin <= 13)
        PORTB{pin - 8} = !PORTB{pin - 8}
    else if(pin <= 20)
        PORTC{pin - 14} = !PORTC{pin - 14}

nothing SetFastPWMPin6(int16 dutyCycle)
    DDRD{6} = true
    // PD6 is now an output
    // dutyCycle = (dutyCycle * 256) / 100 // To make dutyCycle go from 0-100 instead of 0-256
    int8 bit = 2
    for(int8 i from 0 to 7)
        if(dutyCycle%bit > 0)
            OCR0A{i} = true
            dutyCycle = dutyCycle - dutyCycle%bit
        else
            OCR0A{i} = false
        bit = bit * 2
    TCCR0A{7} = true
    // set none-inverting mode
    TCCR0A{0} = true
    TCCR0A{1} = true
    // set fast PWM Mode
    TCCR0B{0} = true
    // sets prescaler to 1 (Full speed) and starts PWM