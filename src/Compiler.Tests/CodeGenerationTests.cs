using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Compiler.LexicalAnalysis;
using System.Linq;
using System.Diagnostics;
using Compiler.Preprocessing;
using Compiler.Parsing;

namespace Compiler.Tests
{
    [TestClass]
    public class CodeGenerationTests
    {
        [TestMethod]
        public void AddExpressionSpecialTestCodeGenerator()
        {
            Lexer lexer = new Lexer(File.ReadAllText(AppContext.BaseDirectory + "/../../../../../docs/tang.tokens.json"));
            var tokens = lexer.Analyse("int8 a = 1 + 2 + 3");
            var tokenEnumerator = tokens.Select(t => new Parsing.Data.Token() { Name = t.Name, Value = t.Value }).GetEnumerator();
            tokenEnumerator.MoveNext();
            Preprocessor preprocessor = new Preprocessor();
            tokens = preprocessor.Process(lexer, null, tokens);
            ProgramParser parser = new ProgramParser();
            var parseTree = parser.ParseProgram(tokenEnumerator);
            var astTranslator = new Translation.ProgramToAST.ProgramToASTTranslator();
            AST.Data.AST ast = astTranslator.Translatep(parseTree) as AST.Data.AST;
            var cTranslator = new Translation.ASTToC.ASTToCTranslator();
            C.Data.C c = cTranslator.Translate(ast) as C.Data.C;

            // c is the autogenerated tree, we have to manually create one and assert their equality


            var cExpected = new C.Data.C(true)
            {
                new C.Data.Declaration(true)
                {
                    new C.Data.CompoundDeclaration(true)
                    {
                        new C.Data.Declaration(true)
                        {
                            new C.Data.CompoundDeclaration(true)
                            {
                                new C.Data.Declaration(true)
                                {
                                    new C.Data.Token(){ Name = "EPSILON" }
                                },
                                new C.Data.Declaration(true)
                                {
                                    new C.Data.IntegerDeclaration(true)
                                    {
                                        new C.Data.IntType(true)
                                        {
                                            new C.Data.Token(){ Name = "signed" },
                                            new C.Data.Token(){ Name = "char" }
                                        },
                                        new C.Data.Token(){ Name = "identifier" }
                                    },
                                    new C.Data.Token(){ Name = ";" }
                                }
                            }
                        },
                        new C.Data.Declaration(true)
                        {
                            new C.Data.CompoundDeclaration(true)
                            {
                                new C.Data.Declaration(true)
                                {
                                    new C.Data.FunctionPrototype(true)
                                    {
                                        new C.Data.Token(){ Name = "int" },
                                        new C.Data.Token(){ Name = "Pow" },
                                        new C.Data.Token(){ Name = "(" },
                                        new C.Data.Token(){ Name = "signed" },
                                        new C.Data.Token(){ Name = "long" },
                                        new C.Data.Token(){ Name = "a" },
                                        new C.Data.Token(){ Name = "," },
                                        new C.Data.Token(){ Name = "unsigned" },
                                        new C.Data.Token(){ Name = "long" },
                                        new C.Data.Token(){ Name = "b" },
                                        new C.Data.Token(){ Name = ")" }
                                    },
                                    new C.Data.Token(){ Name = ";" }
                                },
                                new C.Data.Declaration(true)
                                {
                                    new C.Data.FunctionPrototype(true)
                                    {
                                        new C.Data.Type(true)
                                        {
                                            new C.Data.Token(){ Name = "void" }
                                        },
                                        new C.Data.Token(){ Name = "main" },
                                        new C.Data.Token(){ Name = "(" },
                                        new C.Data.Token(){ Name = ")" }
                                    },
                                    new C.Data.Token(){ Name = ";" }
                                }
                            }
                        }
                    }
                },
                new C.Data.Function(true)
                {
                    new C.Data.CompoundFunction(true)
                    {
                        new C.Data.Function(true)
                        {
                            new C.Data.CompoundFunction(true)
                            {
                                new C.Data.Function(true)
                                {
                                    new C.Data.Token(){ Name = "int" },
                                    new C.Data.Token(){ Name = "Pow" },
                                    new C.Data.Token(){ Name = "(" },
                                    new C.Data.Token(){ Name = "signed" },
                                    new C.Data.Token(){ Name = "long" },
                                    new C.Data.Token(){ Name = "a" },
                                    new C.Data.Token(){ Name = "," },
                                    new C.Data.Token(){ Name = "unsigned" },
                                    new C.Data.Token(){ Name = "long" },
                                    new C.Data.Token(){ Name = "b" },
                                    new C.Data.Token(){ Name = ")" },
                                    new C.Data.Token(){ Name = "{" },
                                    new C.Data.Token(){ Name = "signed" },
                                    new C.Data.Token(){ Name = "long" },
                                    new C.Data.Token(){ Name = "r" },
                                    new C.Data.Token(){ Name = "=" },
                                    new C.Data.Token(){ Name = "1" },
                                    new C.Data.Token(){ Name = ";" },
                                    new C.Data.Token(){ Name = "for" },
                                    new C.Data.Token(){ Name = "(" },
                                    new C.Data.Token(){ Name = "unsigned" },
                                    new C.Data.Token(){ Name = "long" },
                                    new C.Data.Token(){ Name = "i" },
                                    new C.Data.Token(){ Name = "=" },
                                    new C.Data.Token(){ Name = "0" },
                                    new C.Data.Token(){ Name = ";" },
                                    new C.Data.Token(){ Name = "i" },
                                    new C.Data.Token(){ Name = "<" },
                                    new C.Data.Token(){ Name = "b" },
                                    new C.Data.Token(){ Name = ";" },
                                    new C.Data.Token(){ Name = "i" },
                                    new C.Data.Token(){ Name = "++" },
                                    new C.Data.Token(){ Name = ")" },
                                    new C.Data.Token(){ Name = "{" },
                                    new C.Data.Token(){ Name = "r" },
                                    new C.Data.Token(){ Name = "*=" },
                                    new C.Data.Token(){ Name = "a" },
                                    new C.Data.Token(){ Name = ";" },
                                    new C.Data.Token(){ Name = "}" },
                                    new C.Data.Token(){ Name = "return" },
                                    new C.Data.Token(){ Name = "r" },
                                    new C.Data.Token(){ Name = ";" },
                                    new C.Data.Token(){ Name = "}" }
                                },
                                new C.Data.Function(true)
                                {
                                    new C.Data.Token(){ Name = "EPSILON" }
                                }
                            }
                        },
                        new C.Data.Function(true)
                        {
                            new C.Data.Type(true)
                            {
                                new C.Data.Token(){ Name = "void" }
                            },
                            new C.Data.Token(){ Name = "main" },
                            new C.Data.Token(){ Name = "(" },
                            new C.Data.Token(){ Name = ")" },
                            new C.Data.Token(){ Name = "{" },
                            new C.Data.Declaration(true)
                            {
                                new C.Data.Token(){ Name = "EPSILON" }
                            },
                            new C.Data.Statement(true)
                            {
                                new C.Data.CompoundStatement(true)
                                {
                                    new C.Data.Statement(true)
                                    {
                                        new C.Data.Token(){ Name = "EPSILON" }
                                    },
                                    new C.Data.Statement(true)
                                    {
                                        new C.Data.IntegerAssignment(true)
                                        {
                                            new C.Data.Token(){ Name = "identifier" },
                                            new C.Data.Token(){ Name = "=" },
                                            new C.Data.IntegerExpression(true)
                                            {
                                                new C.Data.AddExpression(true)
                                                {
                                                    new C.Data.Token(){ Name = "(" },
                                                    new C.Data.IntegerExpression(true)
                                                    {
                                                        new C.Data.AddExpression(true)
                                                        {
                                                            new C.Data.Token(){ Name = "(" },
                                                            new C.Data.IntegerExpression(true)
                                                            {
                                                                new C.Data.Token(){ Name = "numeral" }
                                                            },
                                                            new C.Data.Token(){ Name = "+" },
                                                            new C.Data.IntegerExpression(true)
                                                            {
                                                                new C.Data.Token(){ Name = "numeral" }
                                                            },
                                                            new C.Data.Token(){ Name = ")" }
                                                        }
                                                    },
                                                    new C.Data.Token(){ Name = "+" },
                                                    new C.Data.IntegerExpression(true)
                                                    {
                                                        new C.Data.Token(){ Name = "numeral" }
                                                    },
                                                    new C.Data.Token(){ Name = ")" }
                                                }
                                            }
                                        },
                                        new C.Data.Token(){ Name = ";" }
                                    }
                                }
                            },
                            new C.Data.Token(){ Name = "}" }
                        }
                    }
                }
            };


            // Use this to print the actual tree
            //var CCC = c.Accept(new C.Visitors.TreePrintVisitor());
            //foreach (var line in CCC)
            //{
            //    Debug.WriteLine(line);
            //}

            // Call a method to walk the tree's nodes and test if their names are equal
            TreeAsserter(c, cExpected);
        }


        public void TreeAsserter(C.Data.Node node, C.Data.Node nodeTest)
        {
            Assert.AreEqual(node.Name, nodeTest.Name);

            if (node is C.Data.Token) { }
            else
            {
                C.Data.Node[] nodeChildren = node.Nodes<C.Data.Node>();
                C.Data.Node[] nodeChildrenTest = nodeTest.Nodes<C.Data.Node>();
                for (int i = 0; i < nodeChildren.Length; i++)
                {
                    Debug.WriteLine(node.Name);
                    TreeAsserter(nodeChildren[i], nodeChildrenTest[i]);
                }
            }
        }
    }
}
