// All register declarations for ATmega328P
register8 PINB  = register8(35)
register8 DDRB  = register8(36)
register8 PORTB = register8(37)
register8 PINC  = register8(38)
register8 DDRC  = register8(39)
register8 PORTC = register8(40)
register8 PIND  = register8(41)
register8 DDRD  = register8(42)
register8 PORTD = register8(43)
register8 TIFR0 = register8(53)
register8 TIFR1 = register8(54)
register8 TIFR2 = register8(55)
register8 PCIFR  = register8(59)
register8 EIFR   = register8(60)
register8 EIMSK  = register8(61)
register8 GPIOR0 = register8(62)
register8 EECR   = register8(63)
register8 EEDR   = register8(64)
register8 EEARL  = register8(65)
register8 EEARH  = register8(66)
register8 GTCCR  = register8(67)
register8 TCCR0A = register8(68)
register8 TCCR0B = register8(69)
register8 TCNT0  = register8(70)
register8 OCR0A  = register8(71)
register8 OCR0B  = register8(72)
register8 GPIOR1 = register8(74)
register8 GPIOR2 = register8(75)
register8 SPCR0  = register8(76)
register8 SPSR0  = register8(77)
register8 SPDR0  = register8(78)
register8 ACSR   = register8(80)
register8 DWDR   = register8(81)
register8 SMCR   = register8(83)
register8 MCUSR  = register8(84)
register8 MCUCR  = register8(85)
register8 SPMCSR = register8(87)
register8 SPL    = register8(93)
register8 SPH    = register8(94)
register8 SREG   = register8(95)
register8 WDTCSR = register8(96)
register8 CLKPR  = register8(97)
register8 PRR    = register8(100)
register8 OSCCAL = register8(102)
register8 PCICR  = register8(104)
register8 EICRA  = register8(105)
register8 PCMSK0 = register8(107)
register8 PCMSK1 = register8(108)
register8 PCMSK2 = register8(109)
register8 TIMSK0 = register8(110)
register8 TIMSK1 = register8(111)
register8 TIMSK2 = register8(112)
register8 ADCL   = register8(120)
register8 ADCH   = register8(121)
int16 ADC()
    int16 result = 0
    for(int8 i from 0 to 7)
        if(ADCL{i})
            result = result + 2^(i)
    for(int8 i from 0 to 1)
        if(ADCH{i})
            result = result + 2^(8+i)
    return result
register8 ADCSRA = register8(122)
register8 ADCSRB = register8(123)
register8 ADMUX  = register8(124)
register8 DIDR0  = register8(126)
register8 DIDR1  = register8(127)
register8 TCCR1A = register8(128)
register8 TCCR1B = register8(129)
register8 TCCR1C = register8(130)
register8 TCNT1L = register8(132)
register8 TCNT1H = register8(133)
register8 ICR1L  = register8(134)
register8 ICR1H  = register8(135)
register8 OCR1AL = register8(136)
register8 OCR1AH = register8(137)
register8 OCR1BL = register8(138)
register8 OCR1BH = register8(139)
register8 TCCR2A = register8(176)
register8 TCCR2B = register8(177)
register8 TCNT2  = register8(178)
register8 OCR2A  = register8(179)
register8 OCR2B  = register8(180)
register8 ASSR   = register8(182)
register8 TWBR   = register8(184)
register8 TWSR   = register8(185)
register8 TWAR   = register8(186)
register8 TWDR   = register8(187)
register8 TWCR   = register8(188)
register8 TWAMR  = register8(189)
register8 UCSR0A = register8(192)
register8 UCSR0B = register8(193)
register8 UCSR0C = register8(194)
register8 UBRR0L = register8(196)
register8 UBRR0H = register8(197)
register8 UDR0   = register8(198)

int8 INTERRUPT_LOW = 0 // Interrupt pin low gennerates interrupt
int8 ANY_EDGE =      1 // Any logical change gennerates interrupt
int8 RISING_EDGE =   2 // LOW to HIGH gennerates interrupt
int8 FALLING_EDGE =  3 // HIGH to LOW gennerates interrupt

int8 INDEX_INT0 =        0  // External interrupt 0
int8 INDEX_INT1 =        1  // External interrupt 1
int8 INDEX_TIMER2_OCA =  2  // Timer2 Output Compare Match
int8 INDEX_TIMER2_OCB =  3  // Timer2 Output Compare Match
int8 INDEX_TIMER2_OF =   4  // Timer2 Overflow
int8 INDEX_TIMER1_IC =   5  // Timer1 Input capture
int8 INDEX_TIMER1_OCA =  6  // Timer1 Output Compare match A
int8 INDEX_TIMER1_OCB =  7  // Timer1 Output Compare match B
int8 INDEX_TIMER1_OF =   8  // Timer1 Overflow
int8 INDEX_TIMER0_OCA =  9 // timer0 output compare match
int8 INDEX_TIMER0_OCB =  10 // timer0 output compare match
int8 INDEX_TIMER0_OF =   11  // Timer0 Overflow
int8 INDEX_USART_RXC =   12  // recieve complete usart
int8 INDEX_USART_DRE =   13 // usart data registry empty
int8 INDEX_USART_TXC =   14 // transmit complete usart

int8 INT0_vect = 2
int8 INT1_vect = 3
int8 PCINT0_vect = 4
int8 PCINT1_vect = 5
int8 PCINT2_vect = 6
int8 WDT_vect = 7
int8 TIMER2_COMPA_vect = 8
int8 TIMER2_COMPB_vect = 9
int8 TIMER2_OVF_vect = 10
int8 TIMER1_CAPT_vect = 11
int8 TIMER1_COMPA_vect = 12
int8 TIMER1_COMPB_vect = 13
int8 TIMER1_OVF_vect = 14
int8 TIMER0_COMPA_vect = 15
int8 TIMER0_COMPB_vect = 16
int8 TIMER0_OVF_vect = 17
int8 SPI_STC_vect = 18
int8 USART_RX_vect = 19
int8 USART_UDRE_vect = 20
int8 USART_TX_vect = 21
int8 ADC_vect = 22
int8 EE_READY_vect = 23
int8 ANALOG_COMP_vect = 24
int8 TWI_vect = 25
int8 SPM_READY_vect = 26
int8 INT0 = 2
int8 INT1 = 3