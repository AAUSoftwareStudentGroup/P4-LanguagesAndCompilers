namespace Generator.Generated
{
	public abstract class Visitor 
	{
		public abstract void Visit(Program node);
		public abstract void Visit(Imports node);
		public abstract void Visit(ImportsP node);
		public abstract void Visit(Import node);
		public abstract void Visit(Statements node);
		public abstract void Visit(StatementsP node);
		public abstract void Visit(Statement node);
		public abstract void Visit(Interrupt node);
		public abstract void Visit(Class node);
		public abstract void Visit(ClassBlock node);
		public abstract void Visit(ClassStatements node);
		public abstract void Visit(ClassStatementsP node);
		public abstract void Visit(ClassStatement node);
		public abstract void Visit(Declaration node);
		public abstract void Visit(IdentifierStatement node);
		public abstract void Visit(LIdentifierOperation node);
		public abstract void Visit(LSelectorOperation node);
		public abstract void Visit(LReturnValueOperation node);
		public abstract void Visit(ElementSelector node);
		public abstract void Visit(BitSelector node);
		public abstract void Visit(ClassAccessor node);
		public abstract void Visit(Assignment node);
		public abstract void Visit(Call node);
		public abstract void Visit(IfStatement node);
		public abstract void Visit(ElseStatement node);
		public abstract void Visit(ElseBlock node);
		public abstract void Visit(WhileStatement node);
		public abstract void Visit(ForStatement node);
		public abstract void Visit(Condition node);
		public abstract void Visit(Definition node);
		public abstract void Visit(FunctionDefinition node);
		public abstract void Visit(SimpleBlock node);
		public abstract void Visit(TypedParameters node);
		public abstract void Visit(TypedParametersF node);
		public abstract void Visit(TypedParametersP node);
		public abstract void Visit(Type node);
		public abstract void Visit(ArrayType node);
		public abstract void Visit(ArraySize node);
		public abstract void Visit(TypeParameters node);
		public abstract void Visit(TypeParametersF node);
		public abstract void Visit(TypeParametersP node);
		public abstract void Visit(SimpleStatements node);
		public abstract void Visit(SimpleStatementsP node);
		public abstract void Visit(SimpleStatement node);
		public abstract void Visit(ReturnStatement node);
		public abstract void Visit(SimpleDeclaration node);
		public abstract void Visit(SimpleDefinition node);
		public abstract void Visit(Expression node);
		public abstract void Visit(OrOperation node);
		public abstract void Visit(OrOperationP node);
		public abstract void Visit(AndOperation node);
		public abstract void Visit(AndOperationP node);
		public abstract void Visit(EqualityOperation node);
		public abstract void Visit(EqualityOperationP node);
		public abstract void Visit(RelationalOperation node);
		public abstract void Visit(RelationalOperationP node);
		public abstract void Visit(AddSubOperation node);
		public abstract void Visit(AddSubOperationP node);
		public abstract void Visit(MultDivOperation node);
		public abstract void Visit(MultDivOperationP node);
		public abstract void Visit(PrimaryOperation node);
		public abstract void Visit(Register node);
		public abstract void Visit(OptionalBitSelector node);
		public abstract void Visit(Array node);
		public abstract void Visit(ArrayF node);
		public abstract void Visit(ArrayP node);
		public abstract void Visit(OptionalElementSelector node);
		public abstract void Visit(RSelectorOperation node);
		public abstract void Visit(Parameters node);
		public abstract void Visit(ParametersF node);
		public abstract void Visit(ParametersP node);
		public abstract void Visit(Token node);
	}
}
