Statement	->  CompoundStatement
		| ScopedLevelStatement
		| ClassDeclaration
		| ProcedureDeclaration
        
CompoundStatement -> Statement Newline SStatement

ScopedLevelStatement ->  Newline 
		| Expression
		| CompoundScopedLevelStatement
		| VariableDeclaration 
		| ObjectDelacartion 
		| Assignment
		| SingleBitAssignment
		| returnExpression
		| IfStatementChains 
		| WhileStatement
		| ForStatement

Newline -> nl

ForStatement -> for ( int x from IntegerExpression to IntegerExpression ) indent ScopedLevelStatement dedent

WhileStatement -> while ( BooleanExpression ) indent ScopedLevelStatement dedent

Assignment -> LeftValue = Expression 

                      

SingleBitAssignment -> lv { i } = BooleanExpression

CompoundScopedLevelStatement -> ScopedLevelStatement Newline ScopedLevelStatement
                        
ClassStatement	->  ClassStatement Newline ClassStatement 
		| VariableDeclaration 
		| ObjectDelacartion
		| ProcedureDeclaration
IfStatementChains ->  if ( BooleanExpression ) indent ScopedLevelStatement dedent 
		| if ( BooleanExpression ) indent ScopedLevelStatement dedent else IfStatementChains
		|if ( BooleanExpression ) indent ScopedLevelStatement dedent else indent ScopedLevelStatement dedent
        

LeftValue ->  x 
		| ObjectNames 
		| ElementAccessor 
		| ArraylvAccessor
        
ObjectNames -> o

ElementAccessor -> LeftValue . LeftValue

ArraylvAccessor -> LeftValue [ IntegerExpression ]                              
        
Expression	->  LeftValue 
		| IntegerExpression 
		| BooleanExpression 
		| ParenthesisExpression 
		| ProcedecureCall

ProcedecureCall -> p ( expression , expression_1 , ... , expression_k )
        

ParenthesisExpression -> ( expression )        

returnExpression -> return expression

IntegerExpression	-> Numerals   
		| expression 
		| AddOp
		| SubOp
		| MulOp
		| DivOp 
		| ModOp 
		| PowOp

AddOp -> IntegerExpression + IntegerExpression

SubOp -> IntegerExpression - IntegerExpression

MulOp -> IntegerExpression * IntegerExpression

DivOp -> IntegerExpression / IntegerExpression

ModOp -> IntegerExpression % IntegerExpression

PowOp -> IntegerExpression ^ IntegerExpression

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
BooleanExpression	->  true 
		| false 
		| Expression 
		| EqOp 
		| LessThanOp 
		| GreaterThanOp
		| LessThanOrEqOp 
		| GreaterThanOrEqOp
		| NotOp 
		| SingleBitAccessor
		| AndOp 
		| OrOp
        
EqOp -> IntegerExpression == IntegerExpression

LessThanOp -> IntegerExpression < IntegerExpression

GreaterThanOp -> IntegerExpression > IntegerExpression

LessThanOrEqOp -> IntegerExpression leq IntegerExpression

GreaterThanOrEqOp -> IntegerExpression geq IntegerExpression

NotOp -> ! IntegerExpression

SingleBitAccessor -> LeftValue { IntegerExpression }

AndOp -> BooleanExpression and BooleanExpression

OrOp -> BooleanExpression and BooleanExpression
    

ProcedureDeclaration ->  T_r p ( T_1 x_1 , T_2 x_2 , ... , T_k x_k ) indent ScopedLevelStatement dedent

VariableDeclaration	-> identifierDcl
		| identifierDclAssign
		| identifierArrayDcl1 
		| identifierArrayDcl2
		| ArrayAccessor 

identifierDcl -> T x

identifierDclAssign -> T x = expression 

identifierArrayDcl1 -> T [ ] x = [ e_1 , e_2 , ... , e_k ] 

identifierArrayDcl2 -> T [ ] x = [ e_1 , e_2 , ... , e_k ] 

ArrayAccessor -> T [ i ]

                

ObjectDelacartion ->  C o 
		| C o [ i ]

SingleObjectDeclaration -> C o 

ArrayObjectDeclartion -> C o [ i ]

ClassDeclaration	->  class C indent _sC dedent