C -> Declaration Function

Declaration -> CompoundDeclaration
             | IntegerDeclaration ;
             | BooleanDeclaration ;
             | RegisterDeclaration ;
             | FunctionPrototype ;
             | EPSILON

CompoundDeclaration -> Declaration Declaration

FunctionPrototype -> Type identifier ( FormalParameters )
                  |  Type main ( )
                  |  Type __vector_ numeral ( ) __attribute__ ( ( signal , used , externally_visible ) )
                  |  signed long Pow ( signed long a , signed long b )

Function -> CompoundFunction
          | Type identifier ( FormalParameters ) { Declaration Statement }
          | Type main ( ) { Declaration Statement }
          | Type __vector_ numeral ( ) { Declaration Statement }
          | signed long Pow ( signed long a , signed long b ) { signed long r = 1 , i ; for ( i = 0 ; i < b ; i ++ ) { r *= a ; } return r ; }
          | EPSILON        

CompoundFunction -> Function Function

FormalParameters -> FormalParameter
                  | EPSILON

FormalParameter -> Type identifier
                 | CompoundFormalParameter

CompoundFormalParameter -> FormalParameter , FormalParameter

Type -> IntType
      | RegisterType
      | BooleanType
      | void

Statement -> EPSILON 
           | CompoundStatement
           | IntegerDeclaration ;
           | IntegerDeclarationInit ;
           | BooleanDeclaration ;
           | BooleanDeclarationInit ;
           | DirectBitAssignment ;
           | IndirectBitAssignment ;
           | RegisterDeclaration ;
           | RegisterDeclarationInit ;
           | IntegerAssignment ;
           | BooleanAssignment ;
           | RegisterAssignment ;
           | IfStatement 
           | IfElseStatement
           | IfElseIfStatement
           | WhileStatement
           | ForStatement
           | Call ;
           | IntegerReturn ;
           | BooleanReturn ;
           | RegisterReturn ;
           | EmptyReturn ;
           | InterruptStatement ;

CompoundStatement -> Statement Statement

IntegerDeclaration -> IntType identifier

IntegerDeclarationInit -> IntType identifier = IntegerExpression
		   
IntegerAssignment -> identifier = IntegerExpression

BooleanDeclaration -> BooleanType identifier

BooleanDeclarationInit -> BooleanType identifier = BooleanExpression

BooleanType -> unsigned char

BooleanAssignment -> identifier = BooleanExpression

DirectBitAssignment -> ( * ( RegisterType ) ( IntegerExpression ) ) = ( BooleanExpression ? ( ( * ( RegisterType ) ( IntegerExpression ) ) \| 1 << ( IntegerExpression ) ) : ( ( * ( RegisterType ) ( IntegerExpression ) ) & ~ ( 1 << ( IntegerExpression ) ) ) )

IndirectBitAssignment -> * identifier = ( BooleanExpression ? ( ( * identifier ) \| 1 << ( IntegerExpression ) ) : ( ( * identifier ) & ~ ( 1 << ( IntegerExpression ) ) ) )

RegisterDeclaration -> RegisterType identifier

RegisterDeclarationInit -> RegisterType identifier = RegisterExpression

RegisterType -> volatile unsigned char *
              | volatile unsigned short *

RegisterAssignment -> identifier = RegisterExpression

RegisterExpression -> RegisterLiteral
			  | identifier
                    | Call

RegisterLiteral -> ( RegisterType ) ( IntegerExpression )

IfStatement -> if ( BooleanExpression ) { Declaration Statement } 

IfElseStatement ->  if ( BooleanExpression ) { Declaration Statement } else { Declaration Statement }

IfElseIfStatement -> if ( BooleanExpression ) { Declaration Statement } else IfStatement
                   | if ( BooleanExpression ) { Declaration Statement } else IfElseStatement
                   | if ( BooleanExpression ) { Declaration Statement } else IfElseIfStatement

WhileStatement -> while ( BooleanExpression ) { Declaration Statement }

ForStatement -> IntType _ identifier [ ] = { IntegerExpression , IntegerExpression , 1 } ; _ identifier [ 2 ] = ( _ identifier [ 0 ] < _ identifier [ 1 ] ? 1 : -1 ) ; IntType identifier = _ identifier [ 0 ] ; do { Declaration Statement _ identifier [ 0 ] += _ identifier [ 2 ] ; identifier = _ identifier [ 0 ] ; } while ( identifier != _ identifier [ 1 ] + _ identifier [ 2 ] ) ;

Call -> identifier ( ExpressionList )

IntegerReturn -> return IntegerExpression

BooleanReturn -> return BooleanExpression

RegisterReturn -> return RegisterExpression

EmptyReturn -> return

InterruptStatement -> __asm__ __volatile__ ("sei" ::: "memory")
                            | __asm__ __volatile__ ("cli" ::: "memory")

ExpressionList -> ExpressionListArgs
                  | EPSILON

ExpressionListArgs -> IntegerExpression
                 | BooleanExpression
                 | RegisterExpression
                 | CompoundArgs

CompoundArgs -> ExpressionListArgs , ExpressionListArgs

IntType -> signed char
         | signed int
         | signed long
         | unsigned char
         | unsigned int
         | unsigned long

IntegerExpression -> identifier
                   | IntegerParenthesisExpression
                   | AddExpression
                   | SubExpression
                   | MulExpression
                   | DivExpression 
                   | ModExpression
                   | PowExpression
                   | numeral
                   | Call

IntegerParenthesisExpression -> ( IntegerExpression )        

AddExpression -> ( IntegerExpression + IntegerExpression )

SubExpression -> ( IntegerExpression - IntegerExpression )

MulExpression -> ( IntegerExpression * IntegerExpression )

DivExpression -> ( IntegerExpression / IntegerExpression )

ModExpression -> ( IntegerExpression % IntegerExpression )

PowExpression -> Pow ( IntegerExpression , IntegerExpression )

BooleanExpression -> 1 
                   | 0 
			             | identifier
                   | DirectBitValue
                   | IndirectBitValue
                   | BooleanParenthesisExpression
                   | IntegerEqExpression 
                   | BooleanEqExpression 
                   | IntegerNotEqExpression
                   | BooleanNotEqExpression
                   | LessThanExpression 
                   | GreaterThanExpression
                   | LessThanOrEqExpression
                   | GreaterThanOrEqExpression
                   | NotExpression 
                   | AndExpression 
                   | OrExpression
                   | Call

DirectBitValue -> ( ( * ( RegisterType ) ( IntegerExpression ) ) & ( 1 << ( IntegerExpression ) ) )

IndirectBitValue -> ( * identifier & ( 1 << ( IntegerExpression ) ) )

BooleanParenthesisExpression -> ( BooleanExpression )

IntegerEqExpression -> ( IntegerExpression == IntegerExpression )

BooleanEqExpression -> ( BooleanExpression == BooleanExpression )

IntegerNotEqExpression -> ( IntegerExpression != IntegerExpression )

BooleanNotEqExpression -> ( BooleanExpression != BooleanExpression )

LessThanExpression -> ( IntegerExpression < IntegerExpression )

GreaterThanExpression -> ( IntegerExpression > IntegerExpression )

LessThanOrEqExpression -> ( IntegerExpression <= IntegerExpression )

GreaterThanOrEqExpression -> ( IntegerExpression >= IntegerExpression )

NotExpression -> ( ! BooleanExpression )

AndExpression -> ( BooleanExpression && BooleanExpression )

OrExpression -> ( BooleanExpression || BooleanExpression )

Expressions -> IntExpressions
            |  BoolExpressions

IntExpressions -> IntegerExpression
                | IntegerList

BoolExpressions -> BooleanExpression
                |  BooleanList

IntegerList -> IntExpressions , IntExpressions

BooleanList -> BoolExpressions , BoolExpressions
