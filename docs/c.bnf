C -> Declarations Functions

Declarations -> Declaration Declarations
              | EPSILON

Declaration -> IntegerDeclaration ;
             | BooleanDeclaration ;
             | RegisterDeclaration ;
             | FunctionPrototype ;

FunctionPrototype -> void symbol ( void )

Functions -> Function Functions
           | EPSILON

Function -> void symbol ( void ) { Statement }

Statement -> EPSILON 
           | CompoundStatement
           | IntegerDeclaration ;
           | IntegerDeclarationInit ;
           | BooleanDeclaration ;
           | BooleanDeclarationInit ;
           | DirectBitAssignment ;
           | IndirectBitAssignment ;
           | RegisterDeclaration ;
           | RegisterDeclarationInit ;
           | IntegerAssignment ;
           | BooleanAssignment ;
           | RegisterAssignment ;
           | IfStatement 
           | IfElseStatement
           | WhileStatement

CompoundStatement -> Statement Statement

IntegerDeclaration -> IntType identifier

IntegerDeclarationInit -> IntType identifier = IntegerExpression
		   
IntegerAssignment -> IntegerVariable = IntegerExpression

BooleanDeclaration -> BooleanType identifier

BooleanDeclarationInit -> BooleanType identifier = BooleanExpression

BooleanType -> unsigned char

BooleanAssignment -> BooleanVariable = BooleanExpression

DirectBitAssignment -> * ( RegisterType ) ( numeral ) = ( BooleanExpression ? ( ( * ( RegisterType ) ( numeral ) ) | 1 << ( IntegerExpression ) ) : ( ( * ( RegisterType ) ( numeral ) ) & ! ( 1 << ( IntegerExpression ) ) ) )

IndirectBitAssignment -> * RegisterVariable = ( BooleanExpression ? ( ( * RegisterVariable ) | 1 << ( IntegerExpression ) ) : ( ( * RegisterVariable ) & ! ( 1 << ( IntegerExpression ) ) ) )

RegisterDeclaration -> RegisterType identifier

RegisterDeclarationInit -> RegisterType identifier = RegisterExpression

RegisterType -> volatile unsigned char *
              | volatile unsigned short *

RegisterAssignment -> RegisterVariable = RegisterExpression

RegisterExpression -> RegisterLiteral
					| RegisterVariable

RegisterLiteral -> * ( RegisterType ) ( numeral )

RegisterVariable -> identifier

IfStatement -> if ( BooleanExpression ) { Declarations Statement } 

IfElseStatement ->  if ( BooleanExpression ) { Declarations Statement } else { Declarations Statement }
		   
WhileStatement -> while ( BooleanExpression ) { Declarations Statement }

ForStatement -> for ( IntType identifier = IntegerExpression ; identifier <= IntegerExpression ; identifier ++ ) { Statement }

IntType -> signed char
         | signed int
         | signed long
         | unsigned char
         | unsigned int
         | unsigned long

IntegerExpression -> IntegerVariable   
                   | IntegerParenthesisExpression
                   | AddExpression
                   | SubExpression
                   | MulExpression
                   | DivExpression 
                   | ModExpression
                   | PowExpression
                   | numeral

IntegerVariable -> identifier

IntegerParenthesisExpression -> ( IntegerExpression )        

AddExpression -> ( IntegerExpression + IntegerExpression )

SubExpression -> ( IntegerExpression - IntegerExpression )

MulExpression -> ( IntegerExpression * IntegerExpression )

DivExpression -> ( IntegerExpression / IntegerExpression )

ModExpression -> ( IntegerExpression % IntegerExpression )

/* implement this later */
PowExpression -> ( IntegerExpression * IntegerExpression )

BooleanExpression -> 1 
                   | 0 
				   | BooleanVariable
                   | DirectBitValue
                   | IndirectBitValue
                   | BooleanParenthesisExpression
                   | IntegerEqExpression 
                   | BooleanEqExpression 
                   | IntegerNotEqExpression
                   | BooleanNotEqExpression
                   | LessThanExpression 
                   | GreaterThanExpression
                   | LessThanOrEqExpression
                   | GreaterThanOrEqExpression
                   | NotExpression 
                   | AndExpression 
                   | OrExpression

BooleanVariable -> identifier

DirectBitValue -> ( ( * ( RegisterType ) ( numeral ) ) & ( 1 << ( IntegerExpression ) ) )

IndirectBitValue -> ( * RegisterVariable & ( 1 << ( IntegerExpression ) ) )

BooleanParenthesisExpression -> ( BooleanExpression )

IntegerEqExpression -> ( IntegerExpression == IntegerExpression )

BooleanEqExpression -> ( BooleanExpression == BooleanExpression )

IntegerNotEqExpression -> ( IntegerExpression != IntegerExpression )

BooleanNotEqExpression -> ( BooleanExpression != BooleanExpression )

LessThanExpression -> ( IntegerExpression < IntegerExpression )

GreaterThanExpression -> ( IntegerExpression > IntegerExpression )

LessThanOrEqExpression -> ( IntegerExpression <= IntegerExpression )

GreaterThanOrEqExpression -> ( IntegerExpression >= IntegerExpression )

NotExpression -> ( ! BooleanExpression )

AndExpression -> ( BooleanExpression && BooleanExpression )

OrExpression -> ( BooleanExpression || BooleanExpression )
