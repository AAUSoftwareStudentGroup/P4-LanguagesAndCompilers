-> := AST -> C
->:a := [AST C C C] -> [C C C]

AST[eof] -> C[Declaration[EPSILON] Function[EPSILON]]

AST[GlobalStatement:gs eof] -> C[Declaration[CompoundDeclaration[dcl Declaration[FunctionPrototype[Type[void] main ( )] ;]]] Function[CompoundFunction[f Function[Type[void] main ( ) { Declaration[EPSILON] s }]]]]
    [gs Declaration[EPSILON] Function[EPSILON] Statement[EPSILON]] ->:a [Declaration:dcl Function:f Statement:s]

[GlobalStatement[CompoundGlobalStatement:cgs] Declaration:dcl Function:f Statement:s] ->:a [dcl1 f1 s1]
    [cgs dcl f s] ->:a [Declaration:dcl1 Function:f1 Statement:s1]

[GlobalStatement[Interrupt:i] Declaration:dcl Function:f Statement:s] ->:a [dcl1 f1 s1]
    [i dcl f s] ->:a [Declaration:dcl1 Function:f1 Statement:s1]

[GlobalStatement[Function:func] Declaration:dcl Function:f Statement:s] ->:a [dcl1 f1 s1]
    [func dcl f s] ->:a [Declaration:dcl1 Function:f1 Statement:s1]

[GlobalStatement[Statement:s] Declaration:dcl Function:f Statement:s1] ->:a [dcl2 f2 s2]
    [s dcl f s1] ->:a [Declaration:dcl2 Function:f2 Statement:s2]

[GlobalStatement[CompoundGlobalStatement:cgs] Declaration:dcl Function:f Statement:s] ->:a [dcl1 f1 s1]
    [cgs dcl f s] ->:a [Declaration:dcl1 Function:f1 Statement:s1]

[CompoundGlobalStatement[GlobalStatement:gs1 newline GlobalStatement:gs2] Declaration:dcl Function:f Statement:s] ->:a [dcl2 f2 s2]
    [gs1 dcl f s] ->:a [Declaration:dcl1 Function:f1 Statement:s1]
    [gs2 dcl1 f1 s1] ->:a [Declaration:dcl2 Function:f2 Statement:s2]

[Interrupt[interrupt ( numeral:i ) indent Statement:s1 dedent] Declaration:dcl Function:f Statement:s] 
->:a [Declaration[CompoundDeclaration[dcl Declaration[FunctionPrototype[Type[void] __vector_21 ( FormalParameters[EPSILON] )] ;]]] Function[CompoundFunction[f Function[Type[void] __vector_21 ( FormalParameters[EPSILON] ) { gs1 si2 }]]] s]
    i -> numeral:i1
    [s1 dcl Function[EPSILON] Statement[EPSILON]] ->:a [Declaration:gs1 Function[EPSILON] Statement:si2]

[Function[Type:t identifier:id ( FormalParameters:p ) indent Statement:stm dedent] Declaration:dcl Function:f Statement:s]
->:a [Declaration[CompoundDeclaration[dcl Declaration[FunctionPrototype[t1 id1 ( p1 ) ] ;]]] Function[CompoundFunction[f Function[t1 id1 ( p1 ) { dcl1 s1 }]]] s]
    t -> Type:t1
    id -> identifier:id1
    p -> FormalParameters:p1
    [stm Declaration[EPSILON] Function[EPSILON] Statement[EPSILON]] ->:a [Declaration:dcl1 Function[EPSILON] Statement:s1]

FormalParameters[EPSILON] -> FormalParameters[EPSILON]

FormalParameters[FormalParameter:p] -> FormalParameters[p1]
    p -> FormalParameter:p1

FormalParameter[Type:t identifier:id] -> FormalParameter[t1 id1]
    t -> Type:t1
    id -> identifier:id1

FormalParameter[CompoundFormalParameter:cpar] -> FormalParameter[cpar1]
    cpar -> CompoundFormalParameter:cpar1

CompoundFormalParameter[FormalParameter:p1 , FormalParameter:p2] -> CompoundFormalParameter[p3 , p4]
    p1 -> FormalParameter:p3
    p2 -> FormalParameter:p4

[Statement[EPSILON] Declaration:dcl Function:f Statement:s] ->:a [dcl f s]
[Statement[newline] Declaration:dcl Function:f Statement:s] ->:a [dcl f s]
[Statement[CompoundStatement:s] Declaration:dcl Function:f Statement:si] ->:a [dcl2 f2 si2]
    [s dcl f si] ->:a [Declaration:dcl2 Function:f2 Statement:si2]
[Statement[IntegerDeclaration:s] Declaration:dcl Function:f Statement:si] ->:a [Declaration[CompoundDeclaration[dcl Declaration[s1 ;]]] f si]
    s -> IntegerDeclaration:s1
	
[Statement[IntegerDeclarationInit[IntType:intType identifier:id = IntegerExpression:iexpr]] Declaration:dcl Function:f Statement:si] ->:a [dcl2 f2 si2]
    [Statement[IntegerDeclaration[intType id]] dcl f si] ->:a [Declaration:dcl1 Function:f1 Statement:si1]
    [Statement[IntegerAssignment[id = iexpr]] dcl1 f1 si1] ->:a [Declaration:dcl2 Function:f2 Statement:si2]
[Statement[BooleanDeclaration:s] Declaration:dcl Function:f Statement:si] ->:a [Declaration[CompoundDeclaration[dcl Declaration[s1 ;]]] f si]
    s -> BooleanDeclaration:s1
[Statement[BooleanDeclarationInit[BooleanType:boolType identifier:id = BooleanExpression:bexpr]] Declaration:dcl Function:f Statement:si] ->:a [dcl2 f2 si2]
    [Statement[BooleanDeclaration[boolType id]] dcl f si] ->:a [Declaration:dcl1 Function:f1 Statement:si1]
    [Statement[BooleanAssignment[id = bexpr]] dcl1 f1 si1] ->:a [Declaration:dcl2 Function:f2 Statement:si2]
[Statement[RegisterDeclaration:s] Declaration:dcl Function:f Statement:si] ->:a [Declaration[CompoundDeclaration[dcl Declaration[s1 ;]]] f si]
    s -> RegisterDeclaration:s1 
[Statement[RegisterDeclarationInit[RegisterType:regType identifier:id = RegisterExpression:rexpr]] Declaration:dcl Function:f Statement:si] ->:a [dcl2 f2 si2]
    [Statement[RegisterDeclaration[regType id]] dcl f si] ->:a [Declaration:dcl1 Function:f1 Statement:si1]
    [Statement[RegisterAssignment[id = rexpr]] dcl1 f1 si1] ->:a [Declaration:dcl2 Function:f2 Statement:si2]
[Statement[DirectBitAssignment:s] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[s1 ;]]]]
    s -> DirectBitAssignment:s1
[Statement[IndirectBitAssignment:s] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[s1 ;]]]]
    s -> IndirectBitAssignment:s1
[Statement[IntegerAssignment:s] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[s1 ;]]]]
    s -> IntegerAssignment:s1
[Statement[BooleanAssignment:s] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[s1 ;]]]]
    s -> BooleanAssignment:s1
[Statement[RegisterAssignment:s] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[s1 ;]]]]
    s -> RegisterAssignment:s1
[Statement[IfStatement:s] Declaration:dcl Function:f Statement:si] ->:a [dcl2 f2 si2]
    [s dcl f si] ->:a [Declaration:dcl2 Function:f2 Statement:si2]
[Statement[IfElseStatement:s] Declaration:dcl Function:f Statement:si] ->:a [dcl2 f2 si2]
    [s dcl f si] ->:a [Declaration:dcl2 Function:f2 Statement:si2]
[Statement[WhileStatement:s] Declaration:dcl Function:f Statement:si] ->:a [dcl2 f2 si2]
    [s dcl f si] ->:a [Declaration:dcl2 Function:f2 Statement:si2]
[Statement[ForStatement:s] Declaration:dcl Function:f Statement:si] ->:a [dcl2 f2 si2]
    [s dcl f si] ->:a [Declaration:dcl2 Function:f2 Statement:si2]
[Statement[IntegerReturn:iret] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[iret1 ;]]]]
    iret -> IntegerReturn:iret1
[Statement[BooleanReturn:bret] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[bret1 ;]]]]
    bret -> BooleanReturn:bret1
[Statement[RegisterReturn:rret] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[rret1 ;]]]]
    rret -> RegisterReturn:rret1
[Statement[Call:c] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[c1 ;]]]]
    c -> Call:c1

[CompoundStatement[Statement:s1 newline Statement:s2] Declaration:dcl Function:f Statement:si] ->:a [dcl3 f3 si3]
    [s1 dcl f si] ->:a [Declaration:dcl2 Function:f2 Statement:si2]
    [s2 dcl2 f2 si2] ->:a [Declaration:dcl3 Function:f3 Statement:si3]

IntegerDeclaration[IntType:i identifier:id] -> IntegerDeclaration[i1 id1]
    i -> IntType:i1
    id -> identifier:id1

IntegerDeclarationInit[IntType:intType identifier:id = IntegerExpression:iexpr] -> IntegerDeclarationInit[intType1 id1 = iexpr1]
    intType -> IntType:intType1
    id -> identifier:id1
    iexpr -> IntegerExpression:iexpr1

IntegerAssignment[identifier:id = IntegerExpression:iexpr] -> IntegerAssignment[id1 = iexpr1] 
    id -> identifier:id1
    iexpr -> IntegerExpression:iexpr1

BooleanDeclaration[BooleanType:boolType identifier:id] -> BooleanDeclaration[boolType1 id1]
    boolType -> BooleanType:boolType1
    id -> identifier:id1

BooleanDeclarationInit[BooleanType:boolType identifier:id = BooleanExpression:bexpr] -> BooleanDeclarationInit[boolType1 id1 = bexpr1]
    boolType -> BooleanType:boolType1
    id -> identifier:id1
    bexpr -> BooleanExpression:bexpr1

BooleanType[bool] -> BooleanType[unsigned char]

BooleanAssignment[identifier:id = BooleanExpression:bexpr] -> BooleanAssignment[id1 = bexpr1]
    id -> identifier:id1
    bexpr -> BooleanExpression:bexpr1

DirectBitAssignment[RegisterType:regType ( IntegerExpression:expr1 ) { IntegerExpression:expr2 } = BooleanExpression:bexpr]
-> DirectBitAssignment[( \* ( regType1 ) ( iexpr1 ) ) = ( bexpr1 ? ( ( \* ( regType1 ) ( iexpr1 ) ) | 1 << ( iexpr2 ) ) \: ( ( \* ( regType1 ) ( iexpr1 ) ) & ~ ( 1 << ( iexpr2 ) ) ) )]
    regType -> RegisterType:regType1
    expr1 -> IntegerExpression:iexpr1
    expr2 -> IntegerExpression:iexpr2
    bexpr -> BooleanExpression:bexpr1

RegisterType[register8] -> RegisterType[volatile unsigned char *]
RegisterType[register16] -> RegisterType[volatile unsigned short *]

IndirectBitAssignment[identifier:id { IntegerExpression:iexpr } = BooleanExpression:bexpr]
-> IndirectBitAssignment[* id1 = ( bexpr1 ? ( ( \* id1 ) | 1 << ( iexpr1 ) ) \: ( ( \* id1 ) & ~ ( 1 << ( iexpr1 ) ) ) )]
    id -> identifier:id1
    iexpr -> IntegerExpression:iexpr1
    bexpr -> BooleanExpression:bexpr1

RegisterDeclaration[RegisterType:regType identifier:id] -> RegisterDeclaration[regType1 id1]
    regType -> RegisterType:regType1
    id -> identifier:id1

RegisterDeclarationInit[RegisterType:regType identifier:id = RegisterExpression:rexpr] -> RegisterDeclarationInit[regType1 id1 = rexpr1]
    rexpr -> RegisterExpression:rexpr1
    regType -> RegisterType:regType1
    id -> identifier:id1

RegisterAssignment[identifier:id = RegisterExpression:rexpr] -> RegisterAssignment[id1 = rexpr1]
    id -> identifier:id1
    rexpr -> RegisterExpression:rexpr1

RegisterExpression[RegisterLiteral:rlit] -> RegisterExpression[rlit1]
    rlit -> RegisterLiteral:rlit1

RegisterExpression[identifier:id] -> RegisterExpression[id1]
    id -> identifier:id1

RegisterExpression[Call:s] -> RegisterExpression[s1]
    s -> Call:s1

IntegerReturn[return IntegerExpression:expr] -> IntegerReturn[return iexpr]
    expr -> IntegerExpression:iexpr

BooleanReturn[return BooleanExpression:expr] -> BooleanReturn[return bexpr]
    expr -> BooleanExpression:bexpr

RegisterReturn[return RegisterExpression:expr] -> RegisterReturn[return rexpr]
    expr -> RegisterExpression:rexpr

Call[identifier:id ( ExpressionList:p )] -> Call[id1 ( p1 )]
    id -> identifier:id1
    p -> ExpressionList:p1

ExpressionList[EPSILON] -> ExpressionList[EPSILON]

ExpressionList[ExpressionListArgs:p] -> ExpressionList[p1]
    p -> ExpressionListArgs:p1

ExpressionListArgs[IntegerExpression:expr] -> ExpressionListArgs[iexpr]
    expr -> IntegerExpression:iexpr

ExpressionListArgs[BooleanExpression:expr] -> ExpressionListArgs[bexpr]
    expr -> BooleanExpression:bexpr

ExpressionListArgs[RegisterExpression:expr] -> ExpressionListArgs[rexpr]
    expr -> RegisterExpression:rexpr

ExpressionListArgs[CompoundArgs[ExpressionListArgs:p1 , ExpressionListArgs:p2]] -> ExpressionListArgs[CompoundArgs[p3 , p4]]
    p1 -> ExpressionListArgs:p3
    p2 -> ExpressionListArgs:p4

RegisterLiteral[RegisterType:regType ( IntegerExpression:iexpr )] -> RegisterLiteral[( regType1 ) ( iexpr1 )]
    regType -> RegisterType:regType1
    iexpr -> IntegerExpression:iexpr1

[IfStatement[if ( BooleanExpression:bexpr ) indent Statement:s dedent] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[IfStatement[if ( bexpr1 ) { dcl3 si3 }]]]]]
    bexpr -> BooleanExpression:bexpr1
    [s Declaration[EPSILON] Function[EPSILON] Statement[EPSILON]] ->:a [Declaration:dcl3 Function:f3 Statement:si3]

[IfElseStatement[if ( BooleanExpression:bexpr ) indent Statement:s dedent else indent Statement:s1 dedent] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[IfElseStatement[ if ( bexpr1 ) { dcl3 si3 } else { dcl4 si4 }]]]]]
    bexpr -> BooleanExpression:bexpr1
    [s Declaration[EPSILON] Function[EPSILON] Statement[EPSILON]] ->:a [Declaration:dcl3 Function:f3 Statement:si3]
    [s1 Declaration[EPSILON] Function[EPSILON] Statement[EPSILON]] ->:a [Declaration:dcl4 Function:f4 Statement:si4]

[WhileStatement[while ( BooleanExpression:bexpr ) indent Statement:s dedent] Declaration:dcl Function:f Statement:si] ->:a [dcl f Statement[CompoundStatement[si Statement[WhileStatement[while ( bexpr1 ) { dcl3 si3 }]]]]]
    bexpr -> BooleanExpression:bexpr1
    [s Declaration[EPSILON] Function[EPSILON] Statement[EPSILON]] ->:a [Declaration:dcl3 Function:f3 Statement:si3]

[ForStatement[for ( IntType:intType identifier:id from IntegerExpression:expr1 to IntegerExpression:expr2 ) indent Statement:s dedent] Declaration:dcl Function:f Statement:si] 
->:a [dcl f Statement[CompoundStatement[si Statement[ForStatement[for ( intType1 id1 = iexpr1 ; id1 <= iexpr2 ; id1 ++ ) { dcl3 si3 }]]]]]
    intType -> IntType:intType1
    id -> identifier:id1
    expr1 -> IntegerExpression:iexpr1
    expr2 -> IntegerExpression:iexpr2
    [s Declaration[EPSILON] Function[EPSILON] Statement[EPSILON]] ->:a [Declaration:dcl3 Function:f3 Statement:si3]

Type[IntType:t] -> Type[t1]
    t -> IntType:t1
Type[RegisterType:t] -> Type[t1]
    t -> RegisterType:t1
Type[BooleanType:t] -> Type[t1]
    t -> BooleanType:t1
Type[nothing] -> Type[void]


IntType[uint8] -> IntType[unsigned char]  
IntType[uint16] -> IntType[unsigned int]  
IntType[uint32] -> IntType[unsigned long]  
IntType[int8] -> IntType[signed char]  
IntType[int16] -> IntType[signed int]  
IntType[int32] -> IntType[signed long]  

IntegerExpression[identifier:id] -> IntegerExpression[id1]
    id -> identifier:id1
IntegerExpression[numeral:s] -> IntegerExpression[s1]
    s -> numeral:s1
IntegerExpression[IntegerParenthesisExpression:s] -> IntegerExpression[s1]
    s -> IntegerParenthesisExpression:s1
IntegerExpression[AddExpression:s] -> IntegerExpression[s1]
    s -> AddExpression:s1
IntegerExpression[SubExpression:s] -> IntegerExpression[s1]
    s -> SubExpression:s1
IntegerExpression[MulExpression:s] -> IntegerExpression[s1]
    s -> MulExpression:s1
IntegerExpression[DivExpression:s] -> IntegerExpression[s1]
    s -> DivExpression:s1 
IntegerExpression[ModExpression:s] -> IntegerExpression[s1]
    s -> ModExpression:s1
IntegerExpression[PowExpression:s] -> IntegerExpression[s1]
    s -> PowExpression:s1
IntegerExpression[Call:s] -> IntegerExpression[s1]
    s -> Call:s1

IntegerParenthesisExpression[( IntegerExpression:iexpr )] -> IntegerParenthesisExpression[( iexpr1 )]
    iexpr -> IntegerExpression:iexpr1

AddExpression[IntegerExpression:iexpr1 + IntegerExpression:iexpr2] -> AddExpression[( iexpr3 + iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

SubExpression[IntegerExpression:iexpr1 - IntegerExpression:iexpr2] -> SubExpression[( iexpr3 - iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

MulExpression[IntegerExpression:iexpr1 \* IntegerExpression:iexpr2] -> MulExpression[( iexpr3 \* iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

DivExpression[IntegerExpression:iexpr1 / IntegerExpression:iexpr2] -> DivExpression[( iexpr3 / iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

ModExpression[IntegerExpression:iexpr1 \% IntegerExpression:iexpr2] -> ModExpression[( iexpr3 \% iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

PowExpression[IntegerExpression:iexpr1 ^ IntegerExpression:iexpr2] -> PowExpression[( iexpr3 \* iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

BooleanExpression[true] -> BooleanExpression[1]
BooleanExpression[false] -> BooleanExpression[0]
BooleanExpression[identifier:id] -> BooleanExpression[id1]
    id -> identifier:id1
BooleanExpression[DirectBitValue:s] -> BooleanExpression[s1]
    s -> DirectBitValue:s1
BooleanExpression[IndirectBitValue:s] -> BooleanExpression[s1]
    s -> IndirectBitValue:s1
BooleanExpression[BooleanParenthesisExpression:s] -> BooleanExpression[s1]
    s -> BooleanParenthesisExpression:s1
BooleanExpression[IntegerEqExpression:s] -> BooleanExpression[s1]
    s -> IntegerEqExpression:s1 
BooleanExpression[BooleanEqExpression:s] -> BooleanExpression[s1]
    s -> BooleanEqExpression:s1 
BooleanExpression[IntegerNotEqExpression:s] -> BooleanExpression[s1]
    s -> IntegerNotEqExpression:s1 
BooleanExpression[BooleanNotEqExpression:s] -> BooleanExpression[s1]
    s -> BooleanNotEqExpression:s1 
BooleanExpression[LessThanExpression:s] -> BooleanExpression[s1]
    s -> LessThanExpression:s1 
BooleanExpression[GreaterThanExpression:s] -> BooleanExpression[s1]
    s -> GreaterThanExpression:s1
BooleanExpression[LessThanOrEqExpression:s] -> BooleanExpression[s1]
    s -> LessThanOrEqExpression:s1 
BooleanExpression[GreaterThanOrEqExpression:s] -> BooleanExpression[s1]
    s -> GreaterThanOrEqExpression:s1 
BooleanExpression[NotExpression:s] -> BooleanExpression[s1]
    s -> NotExpression:s1 
BooleanExpression[AndExpression:s] -> BooleanExpression[s1]
    s -> AndExpression:s1 
BooleanExpression[OrExpression:s] -> BooleanExpression[s1]
    s -> OrExpression:s1
BooleanExpression[Call:s] -> BooleanExpression[s1]
    s -> Call:s1

DirectBitValue[RegisterType:regType ( IntegerExpression:iexpr1 ) { IntegerExpression:iexpr2 }]
-> DirectBitValue[( ( \* ( regType1 ) ( iexpr3 ) ) & ( 1 << ( iexpr4 ) ) )]
    regType -> RegisterType:regType1
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

IndirectBitValue[identifier:id { IntegerExpression:iexpr }]
-> IndirectBitValue[( \* id1 & ( 1 << ( iexpr1 ) ) )]
    id -> identifier:id1
    iexpr -> IntegerExpression:iexpr1

BooleanParenthesisExpression[( BooleanExpression:bexpr )] -> BooleanParenthesisExpression[( bexpr1 )]
    bexpr -> BooleanExpression:bexpr1

IntegerEqExpression[IntegerExpression:iexpr1 == IntegerExpression:iexpr2] -> IntegerEqExpression[( iexpr3 == iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

BooleanEqExpression[BooleanExpression:bexpr1 == BooleanExpression:bexpr2] -> BooleanEqExpression[( bexpr3 == bexpr4 )]
    bexpr1 -> BooleanExpression:bexpr3
    bexpr2 -> BooleanExpression:bexpr4

IntegerNotEqExpression[IntegerExpression:iexpr1 != IntegerExpression:iexpr2] -> IntegerNotEqExpression[( iexpr3 != iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

BooleanNotEqExpression[BooleanExpression:bexpr1 != BooleanExpression:bexpr2] -> BooleanNotEqExpression[( bexpr3 != bexpr4 )]
    bexpr1 -> BooleanExpression:bexpr3
    bexpr2 -> BooleanExpression:bexpr4

LessThanExpression[IntegerExpression:iexpr1 < IntegerExpression:iexpr2] -> LessThanExpression[( iexpr3 < iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

GreaterThanExpression[IntegerExpression:iexpr1 > IntegerExpression:iexpr2] -> GreaterThanExpression[( iexpr3 > iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

LessThanOrEqExpression[IntegerExpression:iexpr1 <= IntegerExpression:iexpr2] -> LessThanOrEqExpression[( iexpr3 <= iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

GreaterThanOrEqExpression[IntegerExpression:iexpr1 >= IntegerExpression:iexpr2] -> GreaterThanOrEqExpression[( iexpr3 >= iexpr4 )]
    iexpr1 -> IntegerExpression:iexpr3
    iexpr2 -> IntegerExpression:iexpr4

NotExpression[! BooleanExpression:bexpr] -> NotExpression[( ! bexpr1 )]
    bexpr -> BooleanExpression:bexpr1

AndExpression[BooleanExpression:bexpr1 and BooleanExpression:bexpr2] -> AndExpression[( bexpr3 && bexpr4 )]
    bexpr1 -> BooleanExpression:bexpr3
    bexpr2 -> BooleanExpression:bexpr4

OrExpression[BooleanExpression:bexpr1 or BooleanExpression:bexpr2] -> OrExpression[( bexpr3 || bexpr4 )]
    bexpr1 -> BooleanExpression:bexpr3
    bexpr2 -> BooleanExpression:bexpr4
