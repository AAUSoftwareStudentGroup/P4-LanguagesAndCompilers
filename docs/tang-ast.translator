->:p := Program -> AST
->:q := Program -> SymbolTable
->:w := Program -> Program
->:s := [Program SymbolTable] -> SymbolTable
->:f := [Program SymbolTable] -> SymbolTable
->:t := [Program SymbolTable SymbolTable] -> AST
-> := [Program SymbolTable] -> [AST SymbolTable]
<=> := Program <=> SymbolTable
</> := Program </> SymbolTable

//Program to AST translation initialization

Program:p ->:p ast
    [p SymbolTable[%Declarations[EPSILON]]] ->:f SymbolTable:s
    [p s] -> [AST:ast SymbolTable]

//SymbolTable lookup

[identifier:id SymbolTable[Declarations:vars]] ->:s dcl
    [id vars] ->:s Declaration:dcl

[identifier:id1 Declarations[Declaration:dcl[Variable[Type identifier:id2]] Declarations]] ->:s dcl
    id1 <=> id2

[identifier:id1 Declarations[Declaration[Variable[Type identifier:id2]] Declarations:dcls]] ->:s dcl
    id1 </> id2
    [id1 dcls] ->:s Declaration:dcl

[identifier:id1 Declarations[Declaration:dcl[Function[ReturnType identifier:id2 Parameters]] Declarations]] ->:s dcl
    id1 <=> id2

[identifier:id1 Declarations[Declaration[Function[ReturnType identifier:id2 Parameters]] Declarations:dcls]] ->:s dcl
    id1 </> id2
    [id1 dcls] ->:s Declaration:dcl

[identifier:id Declarations[EPSILON]] ->:s Declaration[EPSILON]

//Fill all functions into SymbolTable

[Program[GlobalStatements[EPSILON] eof] SymbolTable:s] ->:f s
[Program[GlobalStatements:stms eof] SymbolTable:s] ->:f s1
    [stms s] ->:f SymbolTable:s1

[GlobalStatements[GlobalStatement:stm GlobalStatements[EPSILON]] SymbolTable:s] ->:f s1
    [stm s] ->:f SymbolTable:s1

[GlobalStatements[GlobalStatement:stm GlobalStatements:stmsp] SymbolTable:s] ->:f s2
    [stm s] ->:f SymbolTable:s1
    [stmsp s1] ->:f SymbolTable:s2

[GlobalStatement[Interrupt:inter] SymbolTable:s] ->:f s

[GlobalStatement[Statement:stm] SymbolTable:s] ->:f s1
    [stm s] ->:f SymbolTable:s1

[Interrupt[interrupt ( numeral:i ) indent Statements:stms dedent] SymbolTable:s] ->:f s

[Statements[Statement:stm Statements[EPSILON]] SymbolTable:s] ->:f s1
    [stm s] ->:f SymbolTable:s1

[Statements[Statement:stm Statements:stmsp] SymbolTable:s] ->:f s2
    [stm s] ->:f SymbolTable:s1
    [stmsp s1] ->:f SymbolTable:s2

[Statement[newline] SymbolTable:s] ->:f s

[Statement[IdentifierDeclaration:idDcl] SymbolTable:s] ->:f s1
    [idDcl s] ->:f SymbolTable:s1

[IdentifierDeclaration[IntType identifier Definition[= Expression newline]] SymbolTable:s] ->:f s

[IdentifierDeclaration[IntType:intType identifier:id Definition[( FormalParameters:params ) indent Statements dedent]] SymbolTable:s] 
->:f s <- Declarations[Declaration[Function[ReturnType[Type[wat]] id1 p]] %Declarations[EPSILON]]
    [id s] ->:s Declaration[EPSILON]
    intType ->:q IntType:wat
    id ->:q identifier:id1
    params ->:q Parameters:p

FormalParameters[EPSILON] ->:q Parameters[EPSILON]

FormalParameters[FormalParameter:p1 FormalParametersP:p2] ->:q Parameters[p3 p4]
    p1 ->:q Parameter:p3
    p2 ->:q ParametersP:p4

FormalParametersP[EPSILON] ->:q ParametersP[EPSILON]

FormalParametersP[, FormalParameter:p1 FormalParametersP:p2] ->:q ParametersP[, p3 p4]
    p1 ->:q Parameter:p3
    p2 ->:q ParametersP:p4

FormalParameter[Type:type identifier:id] ->:q Parameter[t id1]
    type ->:q Type:t
    id ->:q identifier:id1

Type[IntType:t] ->:q Type[t1]
    t ->:q IntType:t1

Type[BooleanType:t] ->:q Type[t1]
    t ->:q BooleanType:t1

Type[RegisterType:t] ->:q Type[t1]
    t ->:q RegisterType:t1

[IdentifierDeclaration[IntType identifier Definition[newline]] SymbolTable:s] ->:f s

[IdentifierDeclaration[BooleanType identifier Definition[= Expression newline]] SymbolTable:s] ->:f s

[IdentifierDeclaration[BooleanType:boolType identifier:id Definition[( FormalParameters:params ) indent Statements dedent]] SymbolTable:s] 
->:f s <- Declarations[Declaration[Function[ReturnType[Type[t]] id1 p]] %Declarations[EPSILON]]
    [id s] ->:s Declaration[EPSILON]
    boolType ->:q BooleanType:t
    id ->:q identifier:id1
    params ->:q Parameters:p

[IdentifierDeclaration[BooleanType identifier Definition[newline]] SymbolTable:s] ->:f s

[IdentifierDeclaration[nothing:n identifier:id Definition[( FormalParameters:params ) indent Statements dedent]] SymbolTable:s] 
->:f s <- Declarations[Declaration[Function[ReturnType[t] id1 p]] %Declarations[EPSILON]]
    [id s] ->:s Declaration[EPSILON]
    n ->:q nothing:t
    id ->:q identifier:id1
    params ->:q Parameters:p

[Statement[IdentifierStatement] SymbolTable:s] ->:f s

[Statement[ReturnStatement] SymbolTable:s] ->:f s

[Statement[IfStatement:ifStm] SymbolTable:s] ->:f s

[Statement[WhileStatement:whileStm] SymbolTable:s] ->:f s

[Statement[ForStatement:forStm] SymbolTable:s] ->:f s

[Statement[RegisterStatement:regStm] SymbolTable:s] ->:f s1
    [regStm s] ->:f SymbolTable:s1

[RegisterStatement[RegisterType RegisterOperation[( Expression ) { Expression } = Expression newline]] SymbolTable:s] ->:f s

[RegisterStatement[RegisterType RegisterOperation[identifier Definition[= Expression newline]]] SymbolTable:s] ->:f s

[RegisterStatement[RegisterType RegisterOperation[identifier Definition[newline]]] SymbolTable:s] ->:f s

[RegisterStatement[RegisterType:regType RegisterOperation[identifier:id Definition[( FormalParameters:params ) indent Statements dedent]]] SymbolTable:s] 
->:f s <- Declarations[Declaration[Function[ReturnType[Type[t]] id1 p]] %Declarations[EPSILON]]
    [id s] ->:s Declaration[EPSILON]
    regType ->:q RegisterType:t
    id ->:q identifier:id1
    params ->:q Parameters:p

//Program to AST translation

[Program[GlobalStatements[EPSILON] eof] SymbolTable:s] -> [AST[eof] s]
[Program[GlobalStatements:stms eof] SymbolTable:s] -> [AST[stm eof] s1]
    [stms s] -> [GlobalStatement:stm SymbolTable:s1]

[GlobalStatements[GlobalStatement:stm GlobalStatements[EPSILON]] SymbolTable:s] -> [stm1 s1]
    [stm s] -> [GlobalStatement:stm1 SymbolTable:s1]

[GlobalStatements[GlobalStatement:stm GlobalStatements:stmsp] SymbolTable:s] -> [GlobalStatement[CompoundGlobalStatement[stm1 newline stm2]] s2]
    [stm s] -> [GlobalStatement:stm1 SymbolTable:s1]
    [stmsp s1] -> [GlobalStatement:stm2 SymbolTable:s2]

[GlobalStatement[Interrupt:inter] SymbolTable:s] -> [GlobalStatement[inter1] s]
    [inter s] -> [Interrupt:inter1 SymbolTable]

[GlobalStatement[Statement:stm] SymbolTable:s] -> [GlobalStatement[stm1] s1]
    [stm s] -> [Statement:stm1 SymbolTable:s1]

[GlobalStatement[Statement:stm] SymbolTable:s] -> [stm1 s1]
    [stm s] -> [GlobalStatement:stm1 SymbolTable:s1]

[GlobalStatement[Statement:stm] SymbolTable:s] -> [GlobalStatement[func] s1]
    [stm s] -> [Function:func SymbolTable:s1]

[Interrupt[interrupt ( numeral:i ) indent Statements:stms dedent] SymbolTable:s] -> [Interrupt[interrupt ( i1 ) indent stm dedent] s]
    i ->:p numeral:i1
    [stms s] -> [Statement:stm SymbolTable]

[Statements[Statement:stm Statements[EPSILON]] SymbolTable:s] -> [stm1 s1]
    [stm s] -> [Statement:stm1 SymbolTable:s1]

[Statements[Statement:stm Statements[EPSILON]] SymbolTable:s] -> [GlobalStatement[func] s1]
    [stm s] -> [Function:func SymbolTable:s1]

[Statements[Statement:stm Statements:stmsp] SymbolTable:s] -> [Statement[CompoundStatement[stm1 newline stm2]] s2]
    [stm s] -> [Statement:stm1 SymbolTable:s1]
    [stmsp s1] -> [Statement:stm2 SymbolTable:s2]

[Statements[Statement:stm Statements:stmsp] SymbolTable:s] 
-> [GlobalStatement[CompoundGlobalStatement[GlobalStatement[func] newline GlobalStatement[stm2]]] s2]
    [stm s] -> [Function:func SymbolTable:s1]
    [stmsp s1] -> [Statement:stm2 SymbolTable:s2]

[Statements[Statement:stm Statements:stmsp] SymbolTable:s] 
-> [GlobalStatement[CompoundGlobalStatement[GlobalStatement[func] newline stm2]] s2]
    [stm s] -> [Function:func SymbolTable:s1]
    [stmsp s1] -> [GlobalStatement:stm2 SymbolTable:s2]

[Statement[newline] SymbolTable:s] -> [Statement[newline] s]

[Statement[IdentifierDeclaration:idDcl] SymbolTable:s] -> [Statement[dclStm] s1]
    [idDcl s] -> [IntegerDeclaration:dclStm SymbolTable:s1]

[Statement[IdentifierDeclaration:idDcl] SymbolTable:s] -> [Statement[dclStm] s1]
    [idDcl s] -> [IntegerDeclarationInit:dclStm SymbolTable:s1]

[Statement[IdentifierDeclaration:idDcl] SymbolTable:s] -> [Statement[dclStm] s1]
    [idDcl s] -> [BooleanDeclaration:dclStm SymbolTable:s1]

[Statement[IdentifierDeclaration:idDcl] SymbolTable:s] -> [Statement[dclStm] s1]
    [idDcl s] -> [BooleanDeclarationInit:dclStm SymbolTable:s1]

[Statement[IdentifierDeclaration:idDcl] SymbolTable:s] -> [f s1]
    [idDcl s] -> [Function:f SymbolTable:s1]

[Statement[IdentifierStatement:idStm] SymbolTable:s] -> [Statement[idStm1] s1]
    [idStm s] -> [*:idStm1 SymbolTable:s1]

[Statement[IfStatement:ifStm] SymbolTable:s] -> [Statement[ifStm1] s]
    [ifStm s] -> [*:ifStm1 SymbolTable]

[Statement[WhileStatement:whileStm] SymbolTable:s] -> [Statement[whileStm1] s]
    [whileStm s] -> [WhileStatement:whileStm1 SymbolTable:s1]

[Statement[ForStatement:forStm] SymbolTable:s] -> [Statement[forStm1] s]
    [forStm s] -> [ForStatement:forStm1 SymbolTable:s]

[Statement[RegisterStatement:regStm] SymbolTable:s] -> [Statement[regStm1] s1]
    [regStm s] -> [*:regStm1 SymbolTable:s1]

[Statement[ReturnStatement:ret] SymbolTable:s] -> [Statement[retStm] s1]
    [ret s] -> [*:retStm SymbolTable:s1]

[ReturnStatement[return Expression:expr newline] SymbolTable:s] -> [IntegerReturn[return iret] s]
    [identifier[return] s] ->:s Declaration[Variable[Type[IntType] identifier]]
    [expr s] -> [IntegerExpression:iret SymbolTable]

[ReturnStatement[return Expression:expr newline] SymbolTable:s] -> [BooleanReturn[return bret] s]
    [identifier[return] s] ->:s Declaration[Variable[Type[BooleanType] identifier]]
    [expr s] -> [BooleanExpression:bret SymbolTable]

[ReturnStatement[return Expression:expr newline] SymbolTable:s] -> [RegisterReturn[return rret] s]
    [identifier[return] s] ->:s Declaration[Variable[Type[RegisterType] identifier]]
    [expr s] -> [RegisterExpression:rret SymbolTable]

[IdentifierDeclaration[IntType:t identifier:id Definition[newline]] SymbolTable:s] -> [IntegerDeclaration[t1 id1] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:p IntType:t1
    t ->:q IntType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [id s] ->:s Declaration[EPSILON]

[IdentifierDeclaration[IntType:t identifier:id Definition[( FormalParameters:params ) indent Statements:stms dedent]] SymbolTable:s] 
-> [Function[Type[t1] id1 ( p ) indent stm1 dedent] s]
    t ->:p IntType:t1
    t ->:q IntType:t2
    id ->:p identifier:id1
    [params s] -> [FormalParameters:p SymbolTable:s1]
    [stms s1 <- Declarations[Declaration[Variable[Type[t2] identifier[return]]] %Declarations[EPSILON]]] -> [Statement:stm1 SymbolTable]

[FormalParameters[EPSILON] SymbolTable:s] -> [FormalParameters[EPSILON] s]

[FormalParameters[FormalParameter:p FormalParametersP[EPSILON]] SymbolTable:s] -> [FormalParameters[p1] s1]
    [p s] -> [FormalParameter:p1 SymbolTable:s1]

[FormalParameters[FormalParameter:p FormalParametersP:pp] SymbolTable:s] -> [FormalParameters[FormalParameter[CompoundFormalParameter[p1 , p2]]] s2]
    [p s] -> [FormalParameter:p1 SymbolTable:s1]
    [pp s1] -> [FormalParameter:p2 SymbolTable:s2]

[FormalParametersP[, FormalParameter:p FormalParametersP[EPSILON]] SymbolTable:s] -> [p1 s1]
    [p s] -> [FormalParameter:p1 SymbolTable:s1]

[FormalParametersP[, FormalParameter:p FormalParametersP:pp] SymbolTable:s] -> [FormalParameter[CompoundFormalParameter[p1 , p2]] s2]
    [p s] -> [FormalParameter:p1 SymbolTable:s1]
    [pp s1] -> [FormalParameter:p2 SymbolTable:s2]

[FormalParameter[Type:type identifier:id] SymbolTable:s] -> [FormalParameter[t id1] s <- Declarations[Declaration[Variable[t2 id2]] %Declarations[EPSILON]]]
    type ->:p Type:t
    type ->:q Type:t2
    id ->:p identifier:id1
    id ->:q identifier:id2

Type[IntType:t] ->:p Type[t1]
    t ->:p IntType:t1

Type[BooleanType:t] ->:p Type[t1]
    t ->:p BooleanType:t1

Type[RegisterType:t] ->:p Type[t1]
    t ->:p RegisterType:t1

[IdentifierDeclaration[IntType:t identifier:id Definition[= Expression:expr newline]] SymbolTable:s] -> [IntegerDeclarationInit[t1 id1 = iexpr] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:p IntType:t1
    t ->:q IntType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [expr s] -> [IntegerExpression:iexpr SymbolTable]
    [id s] ->:s Declaration[EPSILON]

[IdentifierDeclaration[nothing:t identifier:id Definition[( FormalParameters:params ) indent Statements:stms dedent]] SymbolTable:s] 
-> [Function[Type[t1] id1 ( p ) indent stm1 dedent] s]
    t ->:p nothing:t1
    t ->:q nothing:t2
    id ->:p identifier:id1
    return ->:q identifier:ret
    [params s] -> [FormalParameters:p SymbolTable:s1]
    [stms s1 <- Declarations[Declaration[Variable[Type[t2] ret] %Declarations]]] -> [Statement:stm1 SymbolTable]

IntType[uint8] ->:p IntType[uint8]  
IntType[uint16] ->:p IntType[uint16]  
IntType[uint32] ->:p IntType[uint32]  
IntType[int8] ->:p IntType[int8]  
IntType[int16] ->:p IntType[int16]  
IntType[int32] ->:p IntType[int32]  

IntType[uint8] ->:q IntType[uint8]  
IntType[uint16] ->:q IntType[uint16]  
IntType[uint32] ->:q IntType[uint32]  
IntType[int8] ->:q IntType[int8]  
IntType[int16] ->:q IntType[int16]  
IntType[int32] ->:q IntType[int32]  

[RegisterStatement[RegisterType:t RegisterOperation[identifier:id Definition[newline]]] SymbolTable:s] -> [RegisterDeclaration[t1 id1] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:p RegisterType:t1
    t ->:q RegisterType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [id s] ->:s Declaration[EPSILON]

[IdentifierDeclaration[RegisterType:t identifier:id Definition[( FormalParameters:params ) indent Statements:stms dedent]] SymbolTable:s] 
-> [Function[Type[t1] id1 ( p ) indent stm1 dedent] s]
    t ->:p RegisterType:t1
    id ->:p identifier:id1
    return ->:q identifier:ret
    [params s] -> [FormalParameters:p SymbolTable:s1]
    [stms s1 <- Declarations[Declaration[Variable[Type[t2] ret] %Declarations]]] -> [Statement:stm1 SymbolTable]

[RegisterStatement[RegisterType:t RegisterOperation[identifier:id Definition[= Expression:expr newline]]] SymbolTable:s] -> [RegisterDeclarationInit[t1 id1 = rexpr] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:p RegisterType:t1
    t ->:q RegisterType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [expr s] -> [RegisterExpression:rexpr SymbolTable]
    [id s] ->:s Declaration[EPSILON]

RegisterType[register8] ->:p RegisterType[register8]
RegisterType[register16] ->:p RegisterType[register16]

RegisterType[register8] ->:q RegisterType[register8]
RegisterType[register16] ->:q RegisterType[register16]

[IdentifierDeclaration[BooleanType:t identifier:id Definition[newline]] SymbolTable:s] -> [BooleanDeclaration[t1 id1] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:p BooleanType:t1
    t ->:q BooleanType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [id s] ->:s Declaration[EPSILON]

[IdentifierDeclaration[BooleanType:t identifier:id Definition[( FormalParameters:params ) indent Statements:stms dedent]] SymbolTable:s] 
-> [Function[Type[t1] id1 ( p ) indent stm1 dedent] s]
    t ->:p BooleanType:t1
    id ->:p identifier:id1
    return ->:q identifier:ret
    [params s] -> [FormalParameters:p SymbolTable:s1]
    [stms s1 <- Declarations[Declaration[Variable[Type[t2] ret] %Declarations]]] -> [Statement:stm1 SymbolTable]

[IdentifierDeclaration[BooleanType:t identifier:id Definition[= Expression:expr newline]] SymbolTable:s] -> [BooleanDeclarationInit[t1 id1 = bexpr] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:p BooleanType:t1
    t ->:q BooleanType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [expr s] -> [BooleanExpression:bexpr SymbolTable]
    [id s] ->:s Declaration[EPSILON]

BooleanType[bool] ->:p BooleanType[bool]

BooleanType[bool] ->:q BooleanType[bool]

[RegisterStatement[RegisterType:t RegisterOperation[( Expression:expr1 ) { Expression:expr2 } = Expression:expr3 newline]] SymbolTable:s] 
-> [DirectBitAssignment[regType ( intExpr1 ) { intExpr2 } = boolExpr] s]
    t ->:p RegisterType:regType
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable:s1]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable:s2]
    [expr3 s] -> [BooleanExpression:boolExpr SymbolTable:s3]

[IdentifierStatement[identifier:id IdentifierStatementP[BitSelector[{ Expression:expr1 }] = Expression:expr2 newline]] SymbolTable:s] -> [IndirectBitAssignment[id1 { intExpr } = boolExpr] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Variable[Type[RegisterType] identifier]]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable:s1]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable:s2]

[IdentifierStatement[identifier:id IdentifierStatementP[BitSelector[EPSILON] = Expression:expr newline]] SymbolTable:s] -> [IntegerAssignment[id1 = intExpr] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Variable[Type[IntType] identifier]]
    [expr s] -> [IntegerExpression:intExpr SymbolTable:s1]

[IdentifierStatement[identifier:id IdentifierStatementP[BitSelector[EPSILON] = Expression:expr newline]] SymbolTable:s] -> [RegisterAssignment[id1 = registerExpr] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Variable[Type[RegisterType] identifier]]
    [expr s] -> [RegisterExpression:registerExpr SymbolTable]

[IdentifierStatement[identifier:id IdentifierStatementP[BitSelector[EPSILON] = Expression:expr newline]] SymbolTable:s] -> [BooleanAssignment[id1 = boolExpr] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Variable[Type[BooleanType] identifier]]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]

//Function call
[IdentifierStatement[identifier:id IdentifierStatementP[( ActualParameters:p )]] SymbolTable:s] -> [Call[id1 ( p2 )] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Function[ReturnType[Type[IntType]] identifier Parameters:p1]]
    [p p1 s] ->:t ActualParameters:p2

[IdentifierStatement[identifier:id IdentifierStatementP[( ActualParameters:p )]] SymbolTable:s] -> [Call[id1 ( p2 )] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Function[ReturnType[Type[BooleanType]] identifier Parameters:p1]]
    [p p1 s] ->:t ActualParameters:p2

[IdentifierStatement[identifier:id IdentifierStatementP[( ActualParameters:p )]] SymbolTable:s] -> [Call[id1 ( p2 )] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Function[ReturnType[Type[RegisterType]] identifier Parameters:p1]]
    [p p1 s] ->:t ActualParameters:p2

[IfStatement[if ( Expression:expr ) indent Statements:stms dedent ElseStatement[EPSILON]] SymbolTable:s] -> [IfStatement[if ( boolExpr ) indent stm dedent] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
    [stms s] -> [Statement:stm SymbolTable]

[IfStatement[if ( Expression:expr ) indent Statements:stms dedent ElseStatement[else indent Statements:stms1 dedent]] SymbolTable:s] -> [IfElseStatement[if ( boolExpr ) indent stm dedent else indent stm1 dedent ] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
    [stms s] -> [Statement:stm SymbolTable]
    [stms1 s] -> [Statement:stm1 SymbolTable]

[WhileStatement[while ( Expression:expr ) indent Statements:stms dedent] SymbolTable:s] -> [WhileStatement[while ( boolExpr ) indent stm dedent] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
    [stms s] -> [Statement:stm SymbolTable]

[ForStatement[for ( IntType:t identifier:id from Expression:expr1 to Expression:expr2 ) indent Statements:stms dedent] SymbolTable:s]
-> [ForStatement[for ( t1 id1 from iexpr1 to iexpr2 ) indent stms1 dedent] s]
    t ->:p IntType:t1
    t ->:q IntType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [expr1 s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]] -> [IntegerExpression:iexpr1 SymbolTable]
    [expr2 s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]] -> [IntegerExpression:iexpr2 SymbolTable]
    [stms s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]] -> [Statement:stms1 SymbolTable]

[Expression[OrExpression:orExpr] SymbolTable:s] -> [expr s]
    [orExpr s] -> [*:expr SymbolTable]

[OrExpression[AndExpression:andExpr OrExpressionP[EPSILON]] SymbolTable:s] -> [expr s]
    [andExpr s] -> [*:expr SymbolTable]
[OrExpression[AndExpression:andExpr OrExpressionP:orExprP] SymbolTable:s] -> [expr2 <- expr1 s]
    [andExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [orExprP s] -> [BooleanExpression:expr2 SymbolTable]

[OrExpressionP[or AndExpression:andExpr OrExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[OrExpression[%BooleanExpression or expr]] s]
    [andExpr s] -> [BooleanExpression:expr SymbolTable]
[OrExpressionP[or AndExpression:andExpr OrExpressionP:orExprP] SymbolTable:s] 
-> [expr2 <- BooleanExpression[OrExpression[%BooleanExpression or expr1]] s]
    [andExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [orExprP s] -> [BooleanExpression:expr2 SymbolTable]

[AndExpression[EqExpression:eqExpr AndExpressionP[EPSILON]] SymbolTable:s] -> [expr s]
    [eqExpr s] -> [*:expr SymbolTable]
[AndExpression[EqExpression:eqExpr AndExpressionP:andExprP] SymbolTable:s] -> [expr2 <- expr1 s]
    [eqExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [andExprP s] -> [BooleanExpression:expr2 SymbolTable]

[AndExpressionP[and EqExpression:eqExpr AndExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[AndExpression[%BooleanExpression and expr]] s]
    [eqExpr s] -> [BooleanExpression:expr SymbolTable]
[AndExpressionP[and EqExpression:eqExpr AndExpressionP:andExprP] SymbolTable:s] 
-> [expr2 <- BooleanExpression[AndExpression[%BooleanExpression And expr1]] s]
    [eqExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [andExprP s] -> [BooleanExpression:expr2 SymbolTable]

[EqExpression[RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]

[EqExpression[RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- boolExpr s]
    [expr1 s] -> [BooleanExpression:boolExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[EqExpression[RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- intExpr s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]    

[EqExpressionP[== RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[IntegerEqExpression[%IntegerExpression == intExpr]] s]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]

[EqExpressionP[== RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[BooleanEqExpression[%BooleanExpression == boolExpr]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]

[EqExpressionP[== RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[IntegerEqExpression[%IntegerExpression == intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[EqExpressionP[== RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[BooleanEqExpression[%BooleanExpression == boolExpr]] s]
    [expr1 s] -> [BooleanExpression:boolExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

 [EqExpressionP[!= RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[IntegerNotEqExpression[%IntegerExpression != intExpr]] s]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]

[EqExpressionP[!= RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[BooleanNotEqExpression[%BooleanExpression != boolExpr]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]

[EqExpressionP[!= RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[IntegerNotEqExpression[%IntegerExpression != intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[EqExpressionP[!= RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[BooleanNotEqExpression[%BooleanExpression != boolExpr]] s]
    [expr1 s] -> [BooleanExpression:boolExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]   

[RelationalExpression[AddSubExpression:expr RelationalExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]
[RelationalExpression[AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [expr3 <- intExpr s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[RelationalExpressionP[< AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[LessThanExpression[%IntegerExpression < intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[> AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[GreaterThanExpression[%IntegerExpression > intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[< AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[LessThanExpression[%IntegerExpression < intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]
[RelationalExpressionP[> AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[GreaterThanExpression[%IntegerExpression > intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]
[RelationalExpressionP[<= AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[LessThanOrEqExpression[%IntegerExpression <= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[>= AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[GreaterThanOrEqExpression[%IntegerExpression >= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[<= AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[LessThanOrEqExpression[%IntegerExpression <= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]
[RelationalExpressionP[>= AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[GreaterThanOrEqExpression[%IntegerExpression >= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]

[AddSubExpression[MulDivExpression:expr AddSubExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]
[AddSubExpression[MulDivExpression:expr1 AddSubExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- intExpr1 s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[AddSubExpressionP[+ MulDivExpression:expr1 AddSubExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[AddExpression[%IntegerExpression + intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[AddSubExpressionP[- MulDivExpression:expr1 AddSubExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[SubExpression[%IntegerExpression - intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[AddSubExpressionP[+ MulDivExpression:expr1 AddSubExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[AddExpression[%IntegerExpression + intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[AddSubExpressionP[- MulDivExpression:expr1 AddSubExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[SubExpression[%IntegerExpression - intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[MulDivExpression[PowExpression:expr MulDivExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]
[MulDivExpression[PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- intExpr1 s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[MulDivExpressionP[\* PowExpression:expr1 MulDivExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[MulExpression[%IntegerExpression \* intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[MulDivExpressionP[/ PowExpression:expr1 MulDivExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[DivExpression[%IntegerExpression / intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[MulDivExpressionP[\% PowExpression:expr1 MulDivExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[ModExpression[%IntegerExpression \% intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[MulDivExpressionP[\* PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[MulExpression[%IntegerExpression \* intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[MulDivExpressionP[/ PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[DivExpression[%IntegerExpression / intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[MulDivExpressionP[\% PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[ModExpression[%IntegerExpression \% intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[PowExpression[PrimaryExpression:expr PowExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]

[PowExpression[PrimaryExpression:expr1 PowExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- intExpr1 s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[PowExpressionP[^ PrimaryExpression:expr1 PowExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[PowExpression[%IntegerExpression ^ intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]

[PowExpressionP[^ PrimaryExpression:expr1 PowExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[PowExpression[%IntegerExpression ^ intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[PrimaryExpression[numeral:i] SymbolTable:s] -> [IntegerExpression[i1] s]
    i ->:p numeral:i1
[PrimaryExpression[identifier:id IdentifierOperation[BitSelector[EPSILON]]] SymbolTable:s] -> [IntegerExpression[id1] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Variable[Type[IntType] identifier]]
[PrimaryExpression[identifier:id IdentifierOperation[BitSelector[EPSILON]]] SymbolTable:s] -> [RegisterExpression[id1] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Variable[Type[RegisterType] identifier]]
[PrimaryExpression[identifier:id IdentifierOperation[BitSelector[EPSILON]]] SymbolTable:s] -> [BooleanExpression[id1] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Variable[Type[BooleanType] identifier]]

//Function call
[PrimaryExpression[identifier:id IdentifierOperation[( ActualParameters:p )]] SymbolTable:s] -> [IntegerExpression[Call[id1 ( p2 )]] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Function[ReturnType[Type[IntType]] identifier Parameters:p1]]
    [p p1 s] ->:t ActualParameters:p2

[PrimaryExpression[identifier:id IdentifierOperation[( ActualParameters:p )]] SymbolTable:s] -> [BooleanExpression[Call[id1 ( p2 )]] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Function[ReturnType[Type[BooleanType]] identifier Parameters:p1]]
    [p p1 s] ->:t ActualParameters:p2

[PrimaryExpression[identifier:id IdentifierOperation[( ActualParameters:p )]] SymbolTable:s] -> [RegisterExpression[Call[id1 ( p2 )]] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Function[ReturnType[Type[RegisterType]] identifier Parameters:p1]]
    [p p1 s] ->:t ActualParameters:p2

//Translate actual parameters and parameter type
[ActualParameters[EPSILON] Parameters[EPSILON] SymbolTable] ->:t ActualParameters[EPSILON]

[ActualParameters[Expression:p1 ActualParametersP[EPSILON]] Parameters[Parameter:p3 ParametersP[EPSILON]] SymbolTable:s] 
->:t ActualParameters[p5]
    [p1 p3 s] ->:t ActualParameter:p5

[ActualParameters[Expression:p1 ActualParametersP:p2] Parameters[Parameter:p3 ParametersP:p4] SymbolTable:s] 
->:t ActualParameters[CompoundActualParameter[p5 , p6]]
    [p1 p3 s] ->:t ActualParameter:p5
    [p2 p4 s] ->:t ActualParameter:p6

[ActualParametersP[, Expression:p1 ActualParametersP:p2] ParametersP[Parameter:p3 ParametersP:p4] SymbolTable:s] 
->:t ActualParameter[CompoundActualParameter[p5 , p6]]
    [p1 p3 s] ->:t ActualParameter:p5
    [p2 p4 s] ->:t ActualParameter:p6

[ActualParametersP[, Expression:p1 ActualParametersP[EPSILON]] ParametersP[Parameter:p3 ParametersP[EPSILON]] SymbolTable:s] 
->:t ActualParameter[p5]
    [p1 p3 s] ->:t ActualParameter:p5

[Expression:expr Parameter[Type[IntType] identifier] SymbolTable:s] ->:t ActualParameter[iexpr]
    [expr s] -> [IntegerExpression:iexpr SymbolTable]

[Expression:expr Parameter[Type[BooleanType] identifier] SymbolTable:s] ->:t ActualParameter[bexpr]
    [expr s] -> [BooleanExpression:bexpr SymbolTable]

[Expression:expr Parameter[Type[RegisterType] identifier] SymbolTable:s] ->:t ActualParameter[rexpr]
    [expr s] -> [RegisterExpression:rexpr SymbolTable]

[PrimaryExpression[identifier:id IdentifierOperation[BitSelector[{ Expression:expr }]]] SymbolTable:s] -> [BooleanExpression[IndirectBitValue[id1 { intExpr }]] s]
    id ->:p identifier:id1
    [id s] ->:s Declaration[Variable[Type[RegisterType] identifier]]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]
[PrimaryExpression[( Expression:expr )] SymbolTable:s] -> [IntegerExpression[IntegerParenthesisExpression[( intExpr )]] s]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]
[PrimaryExpression[( Expression:expr )] SymbolTable:s] -> [BooleanExpression[BooleanParenthesisExpression[( boolExpr )]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
[PrimaryExpression[! PrimaryExpression:expr] SymbolTable:s] -> [BooleanExpression[NotExpression[! boolExpr]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
[PrimaryExpression[RegisterType:t ( Expression:expr ) BitSelector[EPSILON]] SymbolTable:s] -> [RegisterExpression[RegisterLiteral[t1 ( intExpr )]] s]
    t ->:p RegisterType:t1
    [expr s] -> [IntegerExpression:intExpr SymbolTable]
[PrimaryExpression[RegisterType:t ( Expression:expr1 ) BitSelector[{ Expression:expr2 }]] SymbolTable:s] -> [BooleanExpression[DirectBitValue[t1 ( intExpr1 ) { intExpr2 }]] s]
    t ->:p RegisterType:t1
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[PrimaryExpression[true:t] SymbolTable:s] -> [BooleanExpression[t1] s]
    t ->:p true:t1
[PrimaryExpression[false:f] SymbolTable:s] -> [BooleanExpression[f1] s]
    f ->:p false:f1