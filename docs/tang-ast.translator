->:toAST := Program -> AST
->:toSym := Program -> SymbolTable
->:rewrite := Program -> Program
->:lookup := [Program SymbolTable] -> SymbolTable
->:scan := [Program SymbolTable] -> SymbolTable
->:params := [Program SymbolTable SymbolTable] -> AST
->:type := [AST SymbolTable] -> AST
->:largest := [AST AST] -> AST
->:astSym := AST -> SymbolTable
->:astProg := AST -> Program
->:symAST := SymbolTable -> AST
-> := [Program SymbolTable] -> [AST SymbolTable]
<=> := Program <=> SymbolTable
</> := Program </> SymbolTable
<=>:ast := AST <=> AST

//Program to AST translation initialization

Program:p ->:toAST ast
    [p SymbolTable[%Declarations[EPSILON]]] ->:scan SymbolTable:s
    [p s] -> [AST:ast SymbolTable]

//SymbolTable lookup

[identifier:id SymbolTable[Declarations:vars]] ->:lookup dcl
    [id vars] ->:lookup Declaration:dcl

[return SymbolTable[Declarations:vars]] ->:lookup dcl
    [return vars] ->:lookup Declaration:dcl

[return Declarations[EPSILON]] ->:lookup Declaration[EPSILON]

[identifier Declarations[EPSILON]] ->:lookup Declaration[EPSILON]

[identifier:id1 Declarations[Declaration:dcl[Variable[Type identifier:id2]] Declarations]] ->:lookup dcl
    id1 <=> id2

[identifier:id1 Declarations[Declaration[Variable[Type identifier:id2]] Declarations:dcls]] ->:lookup dcl
    id1 </> id2
    [id1 dcls] ->:lookup Declaration:dcl

[identifier:id1 Declarations[Declaration[Variable[Type return]] Declarations:dcls]] ->:lookup dcl
    [id1 dcls] ->:lookup Declaration:dcl

[identifier:id1 Declarations[Declaration:dcl[Function[ReturnType identifier:id2 Parameters]] Declarations]] ->:lookup dcl
    id1 <=> id2

[identifier:id1 Declarations[Declaration[Function[ReturnType identifier:id2 Parameters]] Declarations:dcls]] ->:lookup dcl
    id1 </> id2
    [id1 dcls] ->:lookup Declaration:dcl

[return Declarations[Declaration:dcl[Variable[Type return]] Declarations]] ->:lookup dcl

[return:r Declarations[Declaration[Variable[Type identifier]] Declarations:dcls]] ->:lookup dcl
    [r dcls] ->:lookup Declaration:dcl

[return:r Declarations[Declaration[Function[ReturnType identifier Parameters]] Declarations:dcls]] ->:lookup dcl
    [r dcls] ->:lookup Declaration:dcl

//Fill all functions into SymbolTable

[Program[GlobalStatements[EPSILON] eof] SymbolTable:s] ->:scan s

[Program[GlobalStatements:stms eof] SymbolTable:s] ->:scan s1
    [stms s] ->:scan SymbolTable:s1

[GlobalStatements[GlobalStatement:stm GlobalStatements[EPSILON]] SymbolTable:s] ->:scan s1
    [stm s] ->:scan SymbolTable:s1

[GlobalStatements[GlobalStatement:stm GlobalStatements:stmsp] SymbolTable:s] ->:scan s2
    [stm s] ->:scan SymbolTable:s1
    [stmsp s1] ->:scan SymbolTable:s2

[GlobalStatement[Interrupt:inter] SymbolTable:s] ->:scan s

[GlobalStatement[IdentifierDeclaration:stm] SymbolTable:s] ->:scan s1
    [stm s] ->:scan SymbolTable:s1    

[GlobalStatement[IdentifierStatement:stm] SymbolTable:s] ->:scan s

[GlobalStatement[RegisterStatement:stm] SymbolTable:s] ->:scan s1
    [stm s] ->:scan SymbolTable:s1    

[GlobalStatement[IfStatement:stm] SymbolTable:s] ->:scan s

[GlobalStatement[WhileStatement:stm] SymbolTable:s] ->:scan s

[GlobalStatement[ForStatement:stm] SymbolTable:s] ->:scan s

[GlobalStatement[ReturnStatement:stm] SymbolTable:s] ->:scan s

[GlobalStatement[InterruptStatement:stm] SymbolTable:s] ->:scan s

[GlobalStatement[newline:stm] SymbolTable:s] ->:scan s

[Interrupt[interrupt ( numeral:i ) indent Statements:stms dedent] SymbolTable:s] ->:scan s

[IdentifierSimpleDeclaration SymbolTable:s] ->:scan s

[IdentifierDeclaration[IntType identifier Definition[= Expression newline]] SymbolTable:s] ->:scan s

[IdentifierDeclaration[IntType:intType identifier:id Definition[( FormalParameters:params ) indent Statements dedent]] SymbolTable:s] 
->:scan s <- Declarations[Declaration[Function[ReturnType[Type[it]] id1 p]] %Declarations[EPSILON]]
    [id s] ->:lookup Declaration[EPSILON]
    intType ->:toSym IntType:it
    id ->:toSym identifier:id1
    params ->:toSym Parameters:p

[IdentifierDeclaration[IntType identifier Definition[newline]] SymbolTable:s] ->:scan s

FormalParameters[EPSILON] ->:toSym Parameters[EPSILON]

FormalParameters[FormalParameter:p1 FormalParametersP:p2] ->:toSym Parameters[p3 p4]
    p1 ->:toSym Parameter:p3
    p2 ->:toSym ParametersP:p4

FormalParametersP[EPSILON] ->:toSym ParametersP[EPSILON]

FormalParametersP[, FormalParameter:p1 FormalParametersP:p2] ->:toSym ParametersP[, p3 p4]
    p1 ->:toSym Parameter:p3
    p2 ->:toSym ParametersP:p4

FormalParameter[Type:type identifier:id] ->:toSym Parameter[t id1]
    type ->:toSym Type:t
    id ->:toSym identifier:id1

Type[IntType:t] ->:toSym Type[t1]
    t ->:toSym IntType:t1

Type[BooleanType:t] ->:toSym Type[t1]
    t ->:toSym BooleanType:t1

Type[RegisterType:t] ->:toSym Type[t1]
    t ->:toSym RegisterType:t1

[IdentifierDeclaration[BooleanType identifier Definition[= Expression newline]] SymbolTable:s] ->:scan s

[IdentifierDeclaration[BooleanType:boolType identifier:id Definition[( FormalParameters:params ) indent Statements dedent]] SymbolTable:s] 
->:scan s <- Declarations[Declaration[Function[ReturnType[Type[t]] id1 p]] %Declarations[EPSILON]]
    [id s] ->:lookup Declaration[EPSILON]
    boolType ->:toSym BooleanType:t
    id ->:toSym identifier:id1
    params ->:toSym Parameters:p

[IdentifierDeclaration[BooleanType identifier Definition[newline]] SymbolTable:s] ->:scan s

[IdentifierDeclaration[nothing:n identifier:id ( FormalParameters:params ) indent Statements dedent] SymbolTable:s] 
->:scan s <- Declarations[Declaration[Function[ReturnType[t] id1 p]] %Declarations[EPSILON]]
    [id s] ->:lookup Declaration[EPSILON]
    n ->:toSym nothing:t
    id ->:toSym identifier:id1
    params ->:toSym Parameters:p

[RegisterStatement[RegisterType RegisterOperation[( Expression ) { Expression } = Expression newline]] SymbolTable:s] ->:scan s

[RegisterStatement[RegisterType RegisterOperation[identifier Definition[= Expression newline]]] SymbolTable:s] ->:scan s

[RegisterStatement[RegisterType RegisterOperation[identifier Definition[= Expression newline]]] SymbolTable:s] ->:scan s

[RegisterStatement[RegisterType RegisterOperation[identifier Definition[newline]]] SymbolTable:s] ->:scan s

[RegisterStatement[RegisterType:regType RegisterOperation[identifier:id Definition[( FormalParameters:params ) indent Statements dedent]]] SymbolTable:s] 
->:scan s <- Declarations[Declaration[Function[ReturnType[Type[t]] id1 p]] %Declarations[EPSILON]]
    [id s] ->:lookup Declaration[EPSILON]
    regType ->:toSym RegisterType:t
    id ->:toSym identifier:id1
    params ->:toSym Parameters:p

//Program to AST translation

[Program[GlobalStatements[EPSILON] eof] SymbolTable:s] -> [AST[eof] s]
[Program[GlobalStatements:stms eof] SymbolTable:s] -> [AST[stm eof] s1]
    [stms s] -> [GlobalStatement:stm SymbolTable:s1]

[GlobalStatements[GlobalStatement:stm GlobalStatements[EPSILON]] SymbolTable:s] -> [stm1 s1]
    [stm s] -> [GlobalStatement:stm1 SymbolTable:s1]

[GlobalStatements[GlobalStatement:stm GlobalStatements:stmsp] SymbolTable:s] -> [GlobalStatement[CompoundGlobalStatement[stm1 newline stm2]] s2]
    [stm s] -> [GlobalStatement:stm1 SymbolTable:s1]
    [stmsp s1] -> [GlobalStatement:stm2 SymbolTable:s2]

[GlobalStatement[Interrupt:inter] SymbolTable:s] -> [GlobalStatement[inter1] s]
    [inter s] -> [Interrupt:inter1 SymbolTable]
[GlobalStatement[IdentifierDeclaration:stm] SymbolTable:s] -> [GlobalStatement[stm1] s1]
    [stm s] -> [Function:stm1 SymbolTable:s1]
[GlobalStatement[IdentifierDeclaration:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s1]
    [stm s] -> [IntegerDeclaration:stm1 SymbolTable:s1]
[GlobalStatement[IdentifierDeclaration:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s1]
    [stm s] -> [IntegerDeclarationInit:stm1 SymbolTable:s1]
[GlobalStatement[IdentifierDeclaration:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s1]
    [stm s] -> [BooleanDeclaration:stm1 SymbolTable:s1]
[GlobalStatement[IdentifierDeclaration:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s1]
    [stm s] -> [BooleanDeclarationInit:stm1 SymbolTable:s1]
[GlobalStatement[IdentifierStatement:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s]
    [stm s] -> [*:stm1 SymbolTable]
[GlobalStatement[RegisterStatement:stm] SymbolTable:s] -> [GlobalStatement[stm1] s1]
    [stm s] -> [Function:stm1 SymbolTable:s1]
[GlobalStatement[RegisterStatement:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s1]
    [stm s] -> [RegisterDeclaration:stm1 SymbolTable:s1]
[GlobalStatement[RegisterStatement:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s1]
    [stm s] -> [RegisterDeclarationInit:stm1 SymbolTable:s1]
[GlobalStatement[RegisterStatement:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s1]
    [stm s] -> [DirectBitAssignment:stm1 SymbolTable:s1]
[GlobalStatement[IfStatement:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s]
    [stm s] -> [*:stm1 SymbolTable]
[GlobalStatement[WhileStatement:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s]
    [stm s] -> [*:stm1 SymbolTable]
[GlobalStatement[ForStatement:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s]
    [stm s] -> [*:stm1 SymbolTable]
[GlobalStatement[ReturnStatement:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s1]
    [stm s] -> [*:stm1 SymbolTable:s1]
[GlobalStatement[InterruptStatement:stm] SymbolTable:s] -> [GlobalStatement[Statement[stm1]] s]
    [stm s] -> [*:stm1 SymbolTable]
[GlobalStatement[newline] SymbolTable:s] -> [GlobalStatement[Statement[newline]] s]

[Interrupt[interrupt ( numeral:i ) indent Statements:stms dedent] SymbolTable:s] -> [Interrupt[interrupt ( i1 ) indent stm dedent] s]
    i ->:toAST numeral:i1
    [stms s] -> [Statement:stm SymbolTable]

[Statements[Statement:stm Statements[EPSILON]] SymbolTable:s] -> [stm1 s1]
    [stm s] -> [Statement:stm1 SymbolTable:s1]

[Statements[Statement:stm Statements:stmsp] SymbolTable:s] -> [Statement[CompoundStatement[stm1 newline stm2]] s2]
    [stm s] -> [Statement:stm1 SymbolTable:s1]
    [stmsp s1] -> [Statement:stm2 SymbolTable:s2]

[Statement[newline] SymbolTable:s] -> [Statement[newline] s]
[Statement[IdentifierSimpleDeclaration:stm] SymbolTable:s] -> [Statement[stm1] s1]
    [stm s] -> [*:stm1 SymbolTable:s1]
[Statement[IdentifierStatement:stm] SymbolTable:s] -> [Statement[stm1] s1]
    [stm s] -> [*:stm1 SymbolTable:s1]
[Statement[RegisterSimpleStatement:stm] SymbolTable:s] -> [Statement[stm1] s1]
    [stm s] -> [*:stm1 SymbolTable:s1]
[Statement[IfStatement:stm] SymbolTable:s] -> [Statement[stm1] s1]
    [stm s] -> [*:stm1 SymbolTable:s1]
[Statement[WhileStatement:stm] SymbolTable:s] -> [Statement[stm1] s1]
    [stm s] -> [*:stm1 SymbolTable:s1]
[Statement[ForStatement:stm] SymbolTable:s] -> [Statement[stm1] s1]
    [stm s] -> [*:stm1 SymbolTable:s1]
[Statement[ReturnStatement:stm] SymbolTable:s] -> [Statement[stm1] s1]
    [stm s] -> [*:stm1 SymbolTable:s1]
[Statement[InterruptStatement:stm] SymbolTable:s] -> [Statement[stm1] s1]
    [stm s] -> [*:stm1 SymbolTable:s1]

[ReturnStatement[return ReturnValue[Expression:expr] newline] SymbolTable:s] -> [IntegerReturn[return iret] s]
    [return s] ->:lookup Declaration[Variable[Type[IntType] return]]
    [expr s] -> [IntegerExpression:iret SymbolTable]

[ReturnStatement[return ReturnValue[Expression:expr] newline] SymbolTable:s] -> [BooleanReturn[return bret] s]
    [return s] ->:lookup Declaration[Variable[Type[BooleanType] return]]
    [expr s] -> [BooleanExpression:bret SymbolTable]

[ReturnStatement[return ReturnValue[Expression:expr] newline] SymbolTable:s] -> [RegisterReturn[return rret] s]
    [return s] ->:lookup Declaration[Variable[Type[RegisterType] return]]
    [expr s] -> [RegisterExpression:rret SymbolTable]

[ReturnStatement[return ReturnValue[EPSILON] newline] SymbolTable:s] -> [EmptyReturn[return] s]
    [return s] ->:lookup Declaration[Variable[Type[nothing] return]]

[InterruptStatement[enableinterrupts ( )] SymbolTable:s] -> [InterruptStatement[enableinterrupts ( )] s]

[InterruptStatement[disableinterrupts ( )] SymbolTable:s] -> [InterruptStatement[disableinterrupts ( )] s]

[IdentifierSimpleDeclaration[*:t identifier:id SimpleDefinition:d] SymbolTable:s] -> [dcl s1]
    d ->:rewrite Definition:def
    [IdentifierDeclaration[t id def] s] -> [*:dcl SymbolTable:s1]

[IdentifierDeclaration[IntType:t  identifier:id Definition[newline]] SymbolTable:s] -> [IntegerDeclaration[t1 id1] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    [id s] ->:lookup Declaration[EPSILON]
    t ->:toAST IntType:t1
    t ->:toSym IntType:t2
    id ->:toAST identifier:id1
    id ->:toSym identifier:id2

[IdentifierDeclaration[IntType:t identifier:id Definition[( FormalParameters:params ) indent Statements:stms dedent]] SymbolTable:s] 
-> [Function[Type[t1] id1 ( p ) indent stm1 dedent] s]
    t ->:toAST IntType:t1
    t ->:toSym IntType:t2
    id ->:toAST identifier:id1
    [params s] -> [FormalParameters:p SymbolTable:s1]
    [stms s1 <- Declarations[Declaration[Variable[Type[t2] return]] %Declarations[EPSILON]]] -> [Statement:stm1 SymbolTable]

[FormalParameters[EPSILON] SymbolTable:s] -> [FormalParameters[EPSILON] s]

[FormalParameters[FormalParameter:p FormalParametersP[EPSILON]] SymbolTable:s] -> [FormalParameters[p1] s1]
    [p s] -> [FormalParameter:p1 SymbolTable:s1]

[FormalParameters[FormalParameter:p FormalParametersP:pp] SymbolTable:s] -> [FormalParameters[FormalParameter[CompoundFormalParameter[p1 , p2]]] s2]
    [p s] -> [FormalParameter:p1 SymbolTable:s1]
    [pp s1] -> [FormalParameter:p2 SymbolTable:s2]

[FormalParametersP[, FormalParameter:p FormalParametersP[EPSILON]] SymbolTable:s] -> [p1 s1]
    [p s] -> [FormalParameter:p1 SymbolTable:s1]

[FormalParametersP[, FormalParameter:p FormalParametersP:pp] SymbolTable:s] -> [FormalParameter[CompoundFormalParameter[p1 , p2]] s2]
    [p s] -> [FormalParameter:p1 SymbolTable:s1]
    [pp s1] -> [FormalParameter:p2 SymbolTable:s2]

[FormalParameter[Type:type identifier:id] SymbolTable:s] -> [FormalParameter[t id1] s <- Declarations[Declaration[Variable[t2 id2]] %Declarations[EPSILON]]]
    [id s] ->:lookup Declaration[EPSILON]
    type ->:toAST Type:t
    type ->:toSym Type:t2
    id ->:toAST identifier:id1
    id ->:toSym identifier:id2

Type[IntType:t] ->:toAST Type[t1]
    t ->:toAST IntType:t1

Type[BooleanType:t] ->:toAST Type[t1]
    t ->:toAST BooleanType:t1

Type[RegisterType:t] ->:toAST Type[t1]
    t ->:toAST RegisterType:t1

[IdentifierDeclaration[IntType:t identifier:id Definition[= Expression:expr newline]] SymbolTable:s] -> [IntegerDeclarationInit[t1 id1 = iexpr] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:toAST IntType:t1
    t ->:toSym IntType:t2
    id ->:toAST identifier:id1
    id ->:toSym identifier:id2
    [expr s] -> [IntegerExpression:iexpr SymbolTable]
    [id s] ->:lookup Declaration[EPSILON]
    [iexpr s] ->:type IntType:inttype
    [t1 inttype] ->:largest IntType:largesttype
    largesttype <=>:ast t1

[IdentifierDeclaration[nothing:t identifier:id ( FormalParameters:params ) indent Statements:stms dedent] SymbolTable:s] 
-> [Function[Type[t1] id1 ( p ) indent stm1 dedent] s]
    t ->:toAST nothing:t1
    t ->:toSym nothing:t2
    id ->:toAST identifier:id1
    [params s] -> [FormalParameters:p SymbolTable:s1]
    [stms s1 <- Declarations[Declaration[Variable[Type[t2] return]] %Declarations[EPSILON]]] -> [Statement:stm1 SymbolTable]

IntType[int8] ->:toAST IntType[int8]  
IntType[int16] ->:toAST IntType[int16]  
IntType[int32] ->:toAST IntType[int32]  

IntType[int8] ->:toSym IntType[int8]  
IntType[int16] ->:toSym IntType[int16]  
IntType[int32] ->:toSym IntType[int32]  

[RegisterSimpleStatement:stm SymbolTable:s] -> [stm2 s1]
    stm ->:rewrite RegisterStatement:stm1
    [stm1 s] -> [*:stm2 SymbolTable:s1]

RegisterSimpleStatement[RegisterType:t RegisterSimpleOperation:op] ->:rewrite RegisterStatement[t operation]
    op ->:rewrite RegisterOperation:operation

RegisterSimpleOperation[( Expression:e1 ) { Expression:e2 } = Expression:e3 newline] ->:rewrite RegisterOperation[( e1 ) { e2 } = e3 newline]

RegisterSimpleOperation[identifier:id SimpleDefinition:d] ->:rewrite RegisterOperation[id def]
    d ->:rewrite Definition:def

IdentifierSimpleDeclaration[*:t identifier:id SimpleDefinition:d] ->:rewrite IdentifierDeclaration[t id def]
    d ->:rewrite Definition:def

SimpleDefinition[= Expression:e newline] ->:rewrite Definition[= e newline]

SimpleDefinition[newline] ->:rewrite Definition[newline]

[RegisterStatement[RegisterType:t RegisterOperation[identifier:id Definition[( FormalParameters:params ) indent Statements:stms dedent]]] SymbolTable:s] 
-> [Function[Type[t1] id1 ( p ) indent stm1 dedent] s]
    t ->:toAST RegisterType:t1
    t ->:toSym RegisterType:t2
    id ->:toAST identifier:id1
    id ->:toSym identifier:id2
    [params s] -> [FormalParameters:p SymbolTable:s1]
    [stms s1 <- Declarations[Declaration[Variable[Type[t2] return]] %Declarations[EPSILON]]] -> [Statement:stm1 SymbolTable]

[RegisterStatement[RegisterType:t RegisterOperation[identifier:id Definition[newline]]] SymbolTable:s] -> [RegisterDeclaration[t1 id1] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:toAST RegisterType:t1
    t ->:toSym RegisterType:t2
    id ->:toAST identifier:id1
    id ->:toSym identifier:id2
    [id s] ->:lookup Declaration[EPSILON]
	
[RegisterStatement[RegisterType:t RegisterOperation[identifier:id Definition[= Expression:expr newline]]] SymbolTable:s] -> [RegisterDeclarationInit[t1 id1 = rexpr] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:toAST RegisterType:t1
    t ->:toSym RegisterType:t2
    id ->:toAST identifier:id1
    id ->:toSym identifier:id2
    [expr s] -> [RegisterExpression:rexpr SymbolTable]
    [id s] ->:lookup Declaration[EPSILON]
    [rexpr s] ->:type RegisterType:registertype
    [t1 registertype] ->:largest RegisterType:largesttype
    largesttype <=>:ast t1

[RegisterStatement[RegisterType:t RegisterOperation[( Expression:expr1 ) { Expression:expr2 } = Expression:expr3 newline]] SymbolTable:s] 
-> [DirectBitAssignment[regType ( intExpr1 ) { intExpr2 } = boolExpr] s]
    t ->:toAST RegisterType:regType
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable:s1]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable:s2]
    [expr3 s] -> [BooleanExpression:boolExpr SymbolTable:s3]

RegisterType[register8] ->:toAST RegisterType[register8]
RegisterType[register16] ->:toAST RegisterType[register16]

RegisterType[register8] ->:toSym RegisterType[register8]
RegisterType[register16] ->:toSym RegisterType[register16]

[IdentifierDeclaration[BooleanType:t identifier:id Definition[newline]] SymbolTable:s] -> [BooleanDeclaration[t1 id1] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:toAST BooleanType:t1
    t ->:toSym BooleanType:t2
    id ->:toAST identifier:id1
    id ->:toSym identifier:id2
    [id s] ->:lookup Declaration[EPSILON]

[IdentifierDeclaration[BooleanType:t identifier:id Definition[( FormalParameters:params ) indent Statements:stms dedent]] SymbolTable:s] 
-> [Function[Type[t1] id1 ( p ) indent stm1 dedent] s]
    t ->:toAST BooleanType:t1
    t ->:toSym BooleanType:t2
    id ->:toAST identifier:id1
    id ->:toSym identifier:id2
    [params s] -> [FormalParameters:p SymbolTable:s1]
    [stms s1 <- Declarations[Declaration[Variable[Type[t2] return]] %Declarations[EPSILON]]] -> [Statement:stm1 SymbolTable]

[IdentifierDeclaration[BooleanType:t identifier:id Definition[= Expression:expr newline]] SymbolTable:s] -> [BooleanDeclarationInit[t1 id1 = bexpr] s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]]
    t ->:toAST BooleanType:t1
    t ->:toSym BooleanType:t2
    id ->:toAST identifier:id1
    id ->:toSym identifier:id2
    [expr s] -> [BooleanExpression:bexpr SymbolTable]
    [id s] ->:lookup Declaration[EPSILON]

BooleanType[bool] ->:toAST BooleanType[bool]

BooleanType[bool] ->:toSym BooleanType[bool]

[IdentifierStatement[identifier:id IdentifierStatementP[BitSelector[{ Expression:expr1 }] = Expression:expr2 newline]] SymbolTable:s] -> [IndirectBitAssignment[id1 { intExpr } = boolExpr] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Variable[Type[RegisterType] identifier]]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable:s1]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable:s2]

[IdentifierStatement[identifier:id IdentifierStatementP[BitSelector[EPSILON] = Expression:expr newline]] SymbolTable:s] -> [IntegerAssignment[id1 = intExpr] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Variable[Type[IntType:idtypeSym] identifier]]
    [expr s] -> [IntegerExpression:intExpr SymbolTable:s1]
    [intExpr s] ->:type IntType:inttype
    idtypeSym ->:symAST IntType:idtypeAst
    [idtypeAst inttype] ->:largest IntType:largesttype
    largesttype <=>:ast idtypeAst

IntType[int8] ->:symAST IntType[int8]
IntType[int16] ->:symAST IntType[int16]
IntType[int32] ->:symAST IntType[int32]

RegisterType[register8] ->:symAST RegisterType[register8]
RegisterType[register16] ->:symAST RegisterType[register16]

[IdentifierStatement[identifier:id IdentifierStatementP[BitSelector[EPSILON] = Expression:expr newline]] SymbolTable:s] -> [RegisterAssignment[id1 = registerExpr] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Variable[Type[RegisterType:t] identifier]]
    t ->:symAST RegisterType:t1
    [expr s] -> [RegisterExpression:registerExpr SymbolTable]
    [registerExpr s] ->:type RegisterType:registertype
    [t1 registertype] ->:largest RegisterType:largesttype
    largesttype <=>:ast t1
    

[IdentifierStatement[identifier:id IdentifierStatementP[BitSelector[EPSILON] = Expression:expr newline]] SymbolTable:s] -> [BooleanAssignment[id1 = boolExpr] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Variable[Type[BooleanType] identifier]]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]

//Function call
[IdentifierStatement[identifier:id IdentifierStatementP[( ExpressionList:p )]] SymbolTable:s] -> [Call[id1 ( p2 )] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Function[ReturnType[Type[IntType]] identifier Parameters:p1]]
    [p p1 s] ->:params ExpressionList:p2

[IdentifierStatement[identifier:id IdentifierStatementP[( ExpressionList:p )]] SymbolTable:s] -> [Call[id1 ( p2 )] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Function[ReturnType[Type[BooleanType]] identifier Parameters:p1]]
    [p p1 s] ->:params ExpressionList:p2

[IdentifierStatement[identifier:id IdentifierStatementP[( ExpressionList:p )]] SymbolTable:s] -> [Call[id1 ( p2 )] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Function[ReturnType[Type[RegisterType]] identifier Parameters:p1]]
    [p p1 s] ->:params ExpressionList:p2

[IdentifierStatement[identifier:id IdentifierStatementP[( ExpressionList:p )]] SymbolTable:s] -> [Call[id1 ( p2 )] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Function[ReturnType[nothing] identifier Parameters:p1]]
    [p p1 s] ->:params ExpressionList:p2

[IfStatement[if ( Expression:expr ) indent Statements:stms dedent ElseStatement[EPSILON]] SymbolTable:s] -> [IfStatement[if ( boolExpr ) indent stm dedent] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
    [stms s] -> [Statement:stm SymbolTable]

[IfStatement[if ( Expression:expr ) indent Statements:stms dedent ElseStatement[else ElseBlock[indent Statements:stms1 dedent]]] SymbolTable:s] -> [IfElseStatement[if ( boolExpr ) indent stm dedent else indent stm1 dedent ] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
    [stms s] -> [Statement:stm SymbolTable]
    [stms1 s] -> [Statement:stm1 SymbolTable]

[IfStatement[if ( Expression:expr ) indent Statements:stms dedent ElseStatement[else ElseBlock[IfStatement:ifStm]]] SymbolTable:s] -> [IfElseIfStatement[if ( boolExpr ) indent stm dedent else ifStm1] s]
    [ifStm s] -> [*:ifStm1 SymbolTable]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
    [stms s] -> [Statement:stm SymbolTable]

[WhileStatement[while ( Expression:expr ) indent Statements:stms dedent] SymbolTable:s] -> [WhileStatement[while ( boolExpr ) indent stm dedent] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
    [stms s] -> [Statement:stm SymbolTable]

[ForStatement[for ( IntType:t identifier:id from Expression:expr1 to Expression:expr2 ) indent Statements:stms dedent] SymbolTable:s]
-> [ForStatement[for ( t1 id1 from iexpr1 to iexpr2 ) indent stms1 dedent] s]
    t ->:toAST IntType:t1
    t ->:toSym IntType:t2
    id ->:toAST identifier:id1
    id ->:toSym identifier:id2
    [id s] ->:lookup Declaration[EPSILON]
    [expr1 s] -> [IntegerExpression:iexpr1 SymbolTable]
    [iexpr1 s] ->:type IntType:intexprtype1
    [expr2 s] -> [IntegerExpression:iexpr2 SymbolTable]    
    [iexpr2 s] ->:type IntType:intexprtype2
    [intexprtype1 intexprtype2] ->:largest IntType:largestinttype1
    [t1 largestinttype1] ->:largest IntType:largestinttype2
    t1 <=>:ast largestinttype2
    [stms s <- Declarations[Declaration[Variable[Type[t2] id2]] %Declarations[EPSILON]]] -> [Statement:stms1 SymbolTable]

[Expression[OrExpression:orExpr] SymbolTable:s] -> [expr s]
    [orExpr s] -> [*:expr SymbolTable]

[OrExpression[AndExpression:andExpr OrExpressionP[EPSILON]] SymbolTable:s] -> [expr s]
    [andExpr s] -> [*:expr SymbolTable]
[OrExpression[AndExpression:andExpr OrExpressionP:orExprP] SymbolTable:s] -> [expr2 <- expr1 s]
    [andExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [orExprP s] -> [BooleanExpression:expr2 SymbolTable]

[OrExpressionP[or AndExpression:andExpr OrExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[OrExpression[%BooleanExpression or expr]] s]
    [andExpr s] -> [BooleanExpression:expr SymbolTable]
[OrExpressionP[or AndExpression:andExpr OrExpressionP:orExprP] SymbolTable:s] 
-> [expr2 <- BooleanExpression[OrExpression[%BooleanExpression or expr1]] s]
    [andExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [orExprP s] -> [BooleanExpression:expr2 SymbolTable]

[AndExpression[EqExpression:eqExpr AndExpressionP[EPSILON]] SymbolTable:s] -> [expr s]
    [eqExpr s] -> [*:expr SymbolTable]
[AndExpression[EqExpression:eqExpr AndExpressionP:andExprP] SymbolTable:s] -> [expr2 <- expr1 s]
    [eqExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [andExprP s] -> [BooleanExpression:expr2 SymbolTable]

[AndExpressionP[and EqExpression:eqExpr AndExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[AndExpression[%BooleanExpression and expr]] s]
    [eqExpr s] -> [BooleanExpression:expr SymbolTable]
[AndExpressionP[and EqExpression:eqExpr AndExpressionP:andExprP] SymbolTable:s] 
-> [expr2 <- BooleanExpression[AndExpression[%BooleanExpression and expr1]] s]
    [eqExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [andExprP s] -> [BooleanExpression:expr2 SymbolTable]

[EqExpression[RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]

[EqExpression[RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- boolExpr s]
    [expr1 s] -> [BooleanExpression:boolExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[EqExpression[RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- intExpr s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]    

[EqExpressionP[== RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[IntegerEqExpression[%IntegerExpression == intExpr]] s]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]

[EqExpressionP[== RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[BooleanEqExpression[%BooleanExpression == boolExpr]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]

[EqExpressionP[== RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[IntegerEqExpression[%IntegerExpression == intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[EqExpressionP[== RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[BooleanEqExpression[%BooleanExpression == boolExpr]] s]
    [expr1 s] -> [BooleanExpression:boolExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

 [EqExpressionP[!= RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[IntegerNotEqExpression[%IntegerExpression != intExpr]] s]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]

[EqExpressionP[!= RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[BooleanNotEqExpression[%BooleanExpression != boolExpr]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]

[EqExpressionP[!= RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[IntegerNotEqExpression[%IntegerExpression != intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[EqExpressionP[!= RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[BooleanNotEqExpression[%BooleanExpression != boolExpr]] s]
    [expr1 s] -> [BooleanExpression:boolExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]   

[RelationalExpression[AddSubExpression:expr RelationalExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]
[RelationalExpression[AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [expr3 <- intExpr s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[RelationalExpressionP[< AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[LessThanExpression[%IntegerExpression < intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[> AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[GreaterThanExpression[%IntegerExpression > intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[< AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[LessThanExpression[%IntegerExpression < intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]
[RelationalExpressionP[> AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[GreaterThanExpression[%IntegerExpression > intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]
[RelationalExpressionP[<= AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[LessThanOrEqExpression[%IntegerExpression <= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[>= AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[GreaterThanOrEqExpression[%IntegerExpression >= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[<= AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[LessThanOrEqExpression[%IntegerExpression <= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]
[RelationalExpressionP[>= AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[GreaterThanOrEqExpression[%IntegerExpression >= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]

[AddSubExpression[MulDivExpression:expr AddSubExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]
[AddSubExpression[MulDivExpression:expr1 AddSubExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- intExpr1 s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[AddSubExpressionP[+ MulDivExpression:expr1 AddSubExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[AddExpression[%IntegerExpression + intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[AddSubExpressionP[- MulDivExpression:expr1 AddSubExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[SubExpression[%IntegerExpression - intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[AddSubExpressionP[+ MulDivExpression:expr1 AddSubExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[AddExpression[%IntegerExpression + intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[AddSubExpressionP[- MulDivExpression:expr1 AddSubExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[SubExpression[%IntegerExpression - intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[MulDivExpression[PowExpression:expr MulDivExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]
[MulDivExpression[PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- intExpr1 s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[MulDivExpressionP[\* PowExpression:expr1 MulDivExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[MulExpression[%IntegerExpression \* intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[MulDivExpressionP[/ PowExpression:expr1 MulDivExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[DivExpression[%IntegerExpression / intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[MulDivExpressionP[\% PowExpression:expr1 MulDivExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[ModExpression[%IntegerExpression \% intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[MulDivExpressionP[\* PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[MulExpression[%IntegerExpression \* intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[MulDivExpressionP[/ PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[DivExpression[%IntegerExpression / intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[MulDivExpressionP[\% PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[ModExpression[%IntegerExpression \% intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[PowExpression[PrimaryExpression:expr PowExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]

[PowExpression[PrimaryExpression:expr1 PowExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- intExpr1 s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[PowExpressionP[^ PrimaryExpression:expr1 PowExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[PowExpression[%IntegerExpression ^ intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]

[PowExpressionP[^ PrimaryExpression:expr1 PowExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[PowExpression[%IntegerExpression ^ intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[PrimaryExpression[numeral:i] SymbolTable:s] -> [IntegerExpression[i1] s]
    i ->:toAST numeral:i1
[PrimaryExpression[identifier:id IdentifierOperation[BitSelector[EPSILON]]] SymbolTable:s] -> [IntegerExpression[id1] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Variable[Type[IntType] identifier]]
[PrimaryExpression[identifier:id IdentifierOperation[BitSelector[EPSILON]]] SymbolTable:s] -> [RegisterExpression[id1] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Variable[Type[RegisterType] identifier]]
[PrimaryExpression[identifier:id IdentifierOperation[BitSelector[EPSILON]]] SymbolTable:s] -> [BooleanExpression[id1] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Variable[Type[BooleanType] identifier]]

//Function call
[PrimaryExpression[identifier:id IdentifierOperation[( ExpressionList:p )]] SymbolTable:s] -> [IntegerExpression[Call[id1 ( p2 )]] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Function[ReturnType[Type[IntType]] identifier Parameters:p1]]
    [p p1 s] ->:params ExpressionList:p2

[PrimaryExpression[identifier:id IdentifierOperation[( ExpressionList:p )]] SymbolTable:s] -> [BooleanExpression[Call[id1 ( p2 )]] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Function[ReturnType[Type[BooleanType]] identifier Parameters:p1]]
    [p p1 s] ->:params ExpressionList:p2

[PrimaryExpression[identifier:id IdentifierOperation[( ExpressionList:p )]] SymbolTable:s] -> [RegisterExpression[Call[id1 ( p2 )]] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Function[ReturnType[Type[RegisterType]] identifier Parameters:p1]]
    [p p1 s] ->:params ExpressionList:p2

//Translate actual parameters and parameter type
[ExpressionList[EPSILON] Parameters[EPSILON] SymbolTable] ->:params ExpressionList[EPSILON]

[ExpressionList[Expression:p1 ExpressionListP[EPSILON]] Parameters[Parameter:p3 ParametersP[EPSILON]] SymbolTable:s] 
->:params ExpressionList[p5]
    [p1 p3 s] ->:params ExpressionListArgs:p5

[ExpressionList[Expression:p1 ExpressionListP:p2] Parameters[Parameter:p3 ParametersP:p4] SymbolTable:s] ->:params ExpressionList[ExpressionListArgs[CompoundArgs[p5 , p6]]]
    [p1 p3 s] ->:params ExpressionListArgs:p5
    [p2 p4 s] ->:params ExpressionListArgs:p6

[ExpressionListP[, Expression:p1 ExpressionListP[EPSILON]] ParametersP[, Parameter:p3 ParametersP[EPSILON]] SymbolTable:s] ->:params p5
    [p1 p3 s] ->:params ExpressionListArgs:p5

[ExpressionListP[, Expression:p1 ExpressionListP:p2] ParametersP[, Parameter:p3 ParametersP:p4] SymbolTable:s] 
->:params ExpressionListArgs[CompoundArgs[p5 , p6]]
    [p1 p3 s] ->:params ExpressionListArgs:p5
    [p2 p4 s] ->:params ExpressionListArgs:p6

[Expression:expr Parameter[Type[IntType:t] identifier] SymbolTable:s] ->:params ExpressionListArgs[iexpr]
    [expr s] -> [IntegerExpression:iexpr SymbolTable]
    [iexpr s] ->:type IntType:inttype
    t ->:symAST IntType:paraminttype
    [inttype paraminttype] ->:largest IntType:largesttype
    paraminttype <=>:ast largesttype

[Expression:expr Parameter[Type[BooleanType] identifier] SymbolTable:s] ->:params ExpressionListArgs[bexpr]
    [expr s] -> [BooleanExpression:bexpr SymbolTable]
    
[Expression:expr Parameter[Type[RegisterType:t] identifier] SymbolTable:s] ->:params ExpressionListArgs[rexpr]
    [expr s] -> [RegisterExpression:rexpr SymbolTable]
    [rexpr s] ->:type RegisterType:regtype
    t ->:symAST RegisterType:paramregtype
    [regtype paramregtype] ->:largest RegisterType:largesttype
    paramregtype <=>:ast largesttype

[PrimaryExpression[identifier:id IdentifierOperation[BitSelector[{ Expression:expr }]]] SymbolTable:s] -> [BooleanExpression[IndirectBitValue[id1 { intExpr }]] s]
    id ->:toAST identifier:id1
    [id s] ->:lookup Declaration[Variable[Type[RegisterType] identifier]]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]
[PrimaryExpression[( Expression:expr )] SymbolTable:s] -> [IntegerExpression[IntegerParenthesisExpression[( intExpr )]] s]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]
[PrimaryExpression[( Expression:expr )] SymbolTable:s] -> [BooleanExpression[BooleanParenthesisExpression[( boolExpr )]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
[PrimaryExpression[! PrimaryExpression:expr] SymbolTable:s] -> [BooleanExpression[NotExpression[! boolExpr]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
[PrimaryExpression[RegisterType:t ( Expression:expr ) BitSelector[EPSILON]] SymbolTable:s] -> [RegisterExpression[RegisterLiteral[t1 ( intExpr )]] s]
    t ->:toAST RegisterType:t1
    [expr s] -> [IntegerExpression:intExpr SymbolTable]
[PrimaryExpression[RegisterType:t ( Expression:expr1 ) BitSelector[{ Expression:expr2 }]] SymbolTable:s] -> [BooleanExpression[DirectBitValue[t1 ( intExpr1 ) { intExpr2 }]] s]
    t ->:toAST RegisterType:t1
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[PrimaryExpression[true:t] SymbolTable:s] -> [BooleanExpression[t1] s]
    t ->:toAST true:t1
[PrimaryExpression[false:f] SymbolTable:s] -> [BooleanExpression[f1] s]
    f ->:toAST false:f1

// type system

// integer expressions
[IntegerExpression[identifier:id] SymbolTable:s] ->:type tres
    id ->:astProg identifier:id1
    [id1 s] ->:lookup Declaration[Variable[Type[IntType:t] identifier]]
    t ->:symAST IntType:tres
[IntegerExpression[numeral:n] SymbolTable:s] ->:type IntType[t]
    n ->:type *:t
[IntegerExpression[IntegerParenthesisExpression[( IntegerExpression:e )]] SymbolTable:s] ->:type t
    [e s] ->:type IntType:t
[IntegerExpression[AddExpression[IntegerExpression:e1 + IntegerExpression:e2]] SymbolTable:s] ->:type t3
    [e1 s] ->:type IntType:t1
    [e2 s] ->:type IntType:t2
    [t1 t2] ->:largest IntType:t3
[IntegerExpression[SubExpression[IntegerExpression:e1 - IntegerExpression:e2]] SymbolTable:s] ->:type t3
    [e1 s] ->:type IntType:t1
    [e2 s] ->:type IntType:t2
    [t1 t2] ->:largest IntType:t3
[IntegerExpression[MulExpression[IntegerExpression:e1 \* IntegerExpression:e2]] SymbolTable:s] ->:type t3
    [e1 s] ->:type IntType:t1
    [e2 s] ->:type IntType:t2
    [t1 t2] ->:largest IntType:t3
[IntegerExpression[DivExpression[IntegerExpression:e1 / IntegerExpression:e2]] SymbolTable:s] ->:type t3
    [e1 s] ->:type IntType:t1
    [e2 s] ->:type IntType:t2
    [t1 t2] ->:largest IntType:t3
[IntegerExpression[ModExpression[IntegerExpression:e1 \% IntegerExpression:e2]] SymbolTable:s] ->:type t3
    [e1 s] ->:type IntType:t1
    [e2 s] ->:type IntType:t2
    [t1 t2] ->:largest IntType:t3
[IntegerExpression[PowExpression[IntegerExpression:e1 ^ IntegerExpression:e2]] SymbolTable:s] ->:type t3
    [e1 s] ->:type IntType:t1
    [e2 s] ->:type IntType:t2
    [t1 t2] ->:largest IntType:t3
[IntegerExpression[Call[identifier:id ( ExpressionList )]] SymbolTable:s] ->:type tres
    id ->:astProg identifier:id1
    [id1 s] ->:lookup Declaration[Function[ReturnType[Type[IntType:t]] identifier Parameters]]
    t ->:symAST IntType:tres

[IntType IntType:t[int32]] ->:largest IntType[int32]

[IntType:t[int32] IntType] ->:largest IntType[int32]

[IntType[int16] IntType[int8]] ->:largest IntType[int16]

[IntType[int8] IntType[int16]] ->:largest IntType[int16]

[IntType:t1 IntType:t2] ->:largest t2
    t1 <=>:ast t2

// register expressions
[RegisterExpression[RegisterLiteral[RegisterType:t ( IntegerExpression )]] SymbolTable:s] ->:type t
[RegisterExpression[identifier:id] SymbolTable:s] ->:type tres
    id ->:astProg identifier:id1
    [id1 s] ->:lookup Declaration[Variable[Type[RegisterType:t] identifier]]
    t ->:symAST RegisterType:tres
[RegisterExpression[Call[identifier:id ( ExpressionList )]] SymbolTable:s] ->:type tres
    id ->:astProg identifier:id1
    [id1 s] ->:lookup Declaration[Function[ReturnType[Type[RegisterType:t]] identifier Parameters]]
    t ->:symAST RegisterType:tres

[RegisterType[register8] RegisterType[register16]] ->:largest RegisterType[register16]

[RegisterType[register16] RegisterType[register8]] ->:largest RegisterType[register16]

[RegisterType:t1 RegisterType:t2] ->:largest t2
    t1 <=>:ast t2