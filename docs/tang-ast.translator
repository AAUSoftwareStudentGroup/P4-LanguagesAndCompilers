->:p := Program -> AST
->:q := Program -> SymbolTable
->:s := [Program SymbolTable] -> SymbolTable
-> := [Program SymbolTable] -> [AST SymbolTable]
<=> := Program <=> SymbolTable
</> := Program </> SymbolTable

//Program to AST translation initialization

Program:p ->:p ast
    [p SymbolTable[%Variables[EPSILON]]] -> [AST:ast SymbolTable]

//SymbolTable lookup

[identifier:id SymbolTable[Variables:vars]] ->:s var
    [id vars] ->:s Variable:var

[identifier:id1 Variables:vars1[Variable:var[Type identifier:id2 ParameterTypes] Variables:vars2]] ->:s var
    id1 <=> id2

[identifier:id1 Variables:vars1[Variable[Type identifier:id2 ParameterTypes] Variables:vars2]] ->:s var
    id1 </> id2
    [id1 vars2] ->:s Variable:var

[identifier:id Variables[EPSILON]] ->:s Variable[EPSILON]

//Program to AST translation

[Program[GlobalStatements[EPSILON] eof] SymbolTable:s] -> [AST[eof] s]
[Program[GlobalStatements:stms eof] SymbolTable:s] -> [AST[stm eof] s1]
    [stms s] -> [GlobalStatement:stm SymbolTable:s1]

[GlobalStatements[GlobalStatement:stm GlobalStatements[EPSILON]] SymbolTable:s] -> [stm1 s1]
    [stm s] -> [GlobalStatement:stm1 SymbolTable:s1]

[GlobalStatements[GlobalStatement:stm GlobalStatements:stmsp] SymbolTable:s] -> [GlobalStatement[CompoundGlobalStatement[stm1 newline stm2]] s2]
    [stm s] -> [GlobalStatement:stm1 SymbolTable:s1]
    [stmsp s1] -> [GlobalStatement:stm2 SymbolTable:s2]

[GlobalStatement[Interrupt:inter] SymbolTable:s] -> [GlobalStatement[inter1] s]
    [inter s] -> [Interrupt:inter1 SymbolTable]

[GlobalStatement[Statement:stm] SymbolTable:s] -> [GlobalStatement[stm1] s1]
    [stm s] -> [Statement:stm1 SymbolTable:s1]

[Interrupt[interrupt ( numeral:i ) indent Statements:stms dedent] SymbolTable:s] -> [Interrupt[interrupt ( i1 ) indent stm dedent] s]
    i ->:p numeral:i1
    [stms s] -> [Statement:stm SymbolTable]

[Statements[Statement:stm Statements[EPSILON]] SymbolTable:s] -> [stm1 s1]
    [stm s] -> [Statement:stm1 SymbolTable:s1]

[Statements[Statement:stm Statements:stmsp] SymbolTable:s] -> [Statement[CompoundStatement[stm1 newline stm2]] s2]
    [stm s] -> [Statement:stm1 SymbolTable:s1]
    [stmsp s1] -> [Statement:stm2 SymbolTable:s2]

[Statement[newline] SymbolTable:s] -> [Statement[newline] s]

[Statement[IdentifierDeclaration:idDcl] SymbolTable:s] -> [Statement[dclStm] s1]
    [idDcl s] -> [*:dclStm SymbolTable:s1]

[Statement[Assignment:ass] SymbolTable:s] -> [Statement[assStm] s1]
    [ass s] -> [*:assStm SymbolTable:s1]

[Statement[IfStatement:ifStm] SymbolTable:s] -> [Statement[ifStm1] s]
    [ifStm s] -> [*:ifStm1 SymbolTable]

[Statement[WhileStatement:whileStm] SymbolTable:s] -> [Statement[whileStm1] s]
    [whileStm s] -> [WhileStatement:whileStm1 SymbolTable:s1]

[Statement[ForStatement:forStm] SymbolTable:s] -> [Statement[forStm1] s]
    [forStm s] -> [ForStatement:forStm1 SymbolTable:s]

[Statement[RegisterStatement:regStm] SymbolTable:s] -> [Statement[regStm1] s1]
    [regStm s] -> [*:regStm1 SymbolTable:s1]

[IdentifierDeclaration[IntType:t identifier:id Definition[newline]] SymbolTable:s] -> [IntegerDeclaration[t1 id1] s <- Variables[Variable[Type[t2] id2 ParameterTypes[EPSILON]] %Variables[EPSILON]]]
    t ->:p IntType:t1
    t ->:q IntType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [id s] ->:s Variable[EPSILON]

[IdentifierDeclaration[IntType:t identifier:id Definition[= Expression:expr newline]] SymbolTable:s] -> [IntegerDeclarationInit[t1 id1 = iexpr] s <- Variables[Variable[Type[t2] id2 ParameterTypes[EPSILON]] %Variables[EPSILON]]]
    t ->:p IntType:t1
    t ->:q IntType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [expr s] -> [IntegerExpression:iexpr SymbolTable]
    [id s] ->:s Variable[EPSILON]

IntType[uint8] ->:p IntType[uint8]  
IntType[uint16] ->:p IntType[uint16]  
IntType[uint32] ->:p IntType[uint32]  
IntType[int8] ->:p IntType[int8]  
IntType[int16] ->:p IntType[int16]  
IntType[int32] ->:p IntType[int32]  

IntType[uint8] ->:q IntType[uint8]  
IntType[uint16] ->:q IntType[uint16]  
IntType[uint32] ->:q IntType[uint32]  
IntType[int8] ->:q IntType[int8]  
IntType[int16] ->:q IntType[int16]  
IntType[int32] ->:q IntType[int32]  

[RegisterStatement[RegisterType:t RegisterOperation[identifier:id Definition[newline]]] SymbolTable:s] -> [RegisterDeclaration[t1 id1] s <- Variables[Variable[Type[t2] id2 ParameterTypes[EPSILON]] %Variables[EPSILON]]]
    t ->:p RegisterType:t1
    t ->:q RegisterType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [id s] ->:s Variable[EPSILON]

[RegisterStatement[RegisterType:t RegisterOperation[identifier:id Definition[= Expression:expr newline]]] SymbolTable:s] -> [RegisterDeclarationInit[t1 id1 = rexpr] s <- Variables[Variable[Type[t2] id2 ParameterTypes[EPSILON]] %Variables[EPSILON]]]
    t ->:p RegisterType:t1
    t ->:q RegisterType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [expr s] -> [RegisterExpression:rexpr SymbolTable]
    [id s] ->:s Variable[EPSILON]

RegisterType[register8] ->:p RegisterType[register8]
RegisterType[register16] ->:p RegisterType[register16]

RegisterType[register8] ->:q RegisterType[register8]
RegisterType[register16] ->:q RegisterType[register16]

[IdentifierDeclaration[BooleanType:t identifier:id Definition[newline]] SymbolTable:s] -> [BooleanDeclaration[t1 id1] s <- Variables[Variable[Type[t2] id2 ParameterTypes[EPSILON]] %Variables[EPSILON]]]
    t ->:p BooleanType:t1
    t ->:q BooleanType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [id s] ->:s Variable[EPSILON]

[IdentifierDeclaration[BooleanType:t identifier:id Definition[= Expression:expr newline]] SymbolTable:s] -> [BooleanDeclarationInit[t1 id1 = bexpr] s <- Variables[Variable[Type[t2] id2 ParameterTypes[EPSILON]] %Variables[EPSILON]]]
    t ->:p BooleanType:t1
    t ->:q BooleanType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [expr s] -> [BooleanExpression:bexpr SymbolTable]
    [id s] ->:s Variable[EPSILON]

BooleanType[bool] ->:p BooleanType[bool]

BooleanType[bool] ->:q BooleanType[bool]

[RegisterStatement[RegisterType:t RegisterOperation[( Expression:expr1 ) { Expression:expr2 } = Expression:expr3 newline]] SymbolTable:s] 
-> [DirectBitAssignment[regType ( intExpr1 ) { intExpr2 } = boolExpr] s]
    t ->:p RegisterType:regType
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable:s1]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable:s2]
    [expr3 s] -> [BooleanExpression:boolExpr SymbolTable:s3]

[Assignment[identifier:id BitSelector[{ Expression:expr1 }] = Expression:expr2 newline] SymbolTable:s] -> [IndirectBitAssignment[RegisterVariable[id1] { intExpr } = boolExpr] s]
    id ->:p identifier:id1
    [id s] ->:s Variable[Type[RegisterType] identifier ParameterTypes]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable:s1]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable:s2]

[Assignment[identifier:id BitSelector[EPSILON] = Expression:expr newline] SymbolTable:s] -> [IntegerAssignment[IntegerVariable[id1] = intExpr] s]
    id ->:p identifier:id1
    [id s] ->:s Variable[Type[IntType] identifier ParameterTypes]
    [expr s] -> [IntegerExpression:intExpr SymbolTable:s1]

[Assignment[identifier:id BitSelector[EPSILON] = Expression:expr newline] SymbolTable:s] -> [RegisterAssignment[RegisterVariable[id1] = registerExpr] s]
    id ->:p identifier:id1
    [id s] ->:s Variable[Type[RegisterType] identifier ParameterTypes]
    [expr s] -> [RegisterExpression:registerExpr SymbolTable]

[Assignment[identifier:id BitSelector[EPSILON] = Expression:expr newline] SymbolTable:s] -> [BooleanAssignment[BooleanVariable[id1] = boolExpr] s]
    id ->:p identifier:id1
    [id s] ->:s Variable[Type[BooleanType] identifier ParameterTypes]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]

[IfStatement[if ( Expression:expr ) indent Statements:stms dedent ElseStatement[EPSILON]] SymbolTable:s] -> [IfStatement[if ( boolExpr ) indent stm dedent] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
    [stms s] -> [Statement:stm SymbolTable]

[IfStatement[if ( Expression:expr ) indent Statements:stms dedent ElseStatement[else indent Statements:stms1 dedent]] SymbolTable:s] -> [IfElseStatement[if ( boolExpr ) indent stm dedent else indent stm1 dedent ] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
    [stms s] -> [Statement:stm SymbolTable]
    [stms1 s] -> [Statement:stm1 SymbolTable]

[WhileStatement[while ( Expression:expr ) indent Statements:stms dedent] SymbolTable:s] -> [WhileStatement[while ( boolExpr ) indent stm dedent] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
    [stms s] -> [Statement:stm SymbolTable]

[ForStatement[for ( IntType:t identifier:id from Expression:expr1 to Expression:expr2 ) indent Statements:stms dedent] SymbolTable:s]
-> [ForStatement[for ( t1 id1 from iexpr1 to iexpr2 ) indent stms1 dedent] s]
    t ->:p IntType:t1
    t ->:q IntType:t2
    id ->:p identifier:id1
    id ->:q identifier:id2
    [expr1 s <- Variables[Variable[Type[t2] id2 ParameterTypes[EPSILON]] %Variables[EPSILON]]] -> [IntegerExpression:iexpr1 SymbolTable]
    [expr2 s <- Variables[Variable[Type[t2] id2 ParameterTypes[EPSILON]] %Variables[EPSILON]]] -> [IntegerExpression:iexpr2 SymbolTable]
    [stms s <- Variables[Variable[Type[t2] id2 ParameterTypes[EPSILON]] %Variables[EPSILON]]] -> [Statement:stms1 SymbolTable]

[Expression[OrExpression:orExpr] SymbolTable:s] -> [expr s]
    [orExpr s] -> [*:expr SymbolTable]

[OrExpression[AndExpression:andExpr OrExpressionP[EPSILON]] SymbolTable:s] -> [expr s]
    [andExpr s] -> [*:expr SymbolTable]
[OrExpression[AndExpression:andExpr OrExpressionP:orExprP] SymbolTable:s] -> [expr2 <- expr1 s]
    [andExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [orExprP s] -> [BooleanExpression:expr2 SymbolTable]

[OrExpressionP[or AndExpression:andExpr OrExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[OrExpression[%BooleanExpression or expr]] s]
    [andExpr s] -> [BooleanExpression:expr SymbolTable]
[OrExpressionP[or AndExpression:andExpr OrExpressionP:orExprP] SymbolTable:s] 
-> [expr2 <- BooleanExpression[OrExpression[%BooleanExpression or expr1]] s]
    [andExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [orExprP s] -> [BooleanExpression:expr2 SymbolTable]

[AndExpression[EqExpression:eqExpr AndExpressionP[EPSILON]] SymbolTable:s] -> [expr s]
    [eqExpr s] -> [*:expr SymbolTable]
[AndExpression[EqExpression:eqExpr AndExpressionP:andExprP] SymbolTable:s] -> [expr2 <- expr1 s]
    [eqExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [andExprP s] -> [BooleanExpression:expr2 SymbolTable]

[AndExpressionP[and EqExpression:eqExpr AndExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[AndExpression[%BooleanExpression and expr]] s]
    [eqExpr s] -> [BooleanExpression:expr SymbolTable]
[AndExpressionP[and EqExpression:eqExpr AndExpressionP:andExprP] SymbolTable:s] 
-> [expr2 <- BooleanExpression[AndExpression[%BooleanExpression And expr1]] s]
    [eqExpr s] -> [BooleanExpression:expr1 SymbolTable]
    [andExprP s] -> [BooleanExpression:expr2 SymbolTable]

[EqExpression[RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]

[EqExpression[RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- boolExpr s]
    [expr1 s] -> [BooleanExpression:boolExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[EqExpression[RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- intExpr s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]    

[EqExpressionP[== RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[IntegerEqExpression[%IntegerExpression == intExpr]] s]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]

[EqExpressionP[== RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[BooleanEqExpression[%BooleanExpression == boolExpr]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]

[EqExpressionP[== RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[IntegerEqExpression[%IntegerExpression == intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[EqExpressionP[== RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[BooleanEqExpression[%BooleanExpression == boolExpr]] s]
    [expr1 s] -> [BooleanExpression:boolExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

 [EqExpressionP[!= RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[IntegerNotEqExpression[%IntegerExpression != intExpr]] s]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]

[EqExpressionP[!= RelationalExpression:expr EqExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[BooleanNotEqExpression[%BooleanExpression != boolExpr]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]

[EqExpressionP[!= RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[IntegerNotEqExpression[%IntegerExpression != intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[EqExpressionP[!= RelationalExpression:expr1 EqExpressionP:expr2] SymbolTable:s] -> [expr3 <- BooleanExpression[BooleanNotEqExpression[%BooleanExpression != boolExpr]] s]
    [expr1 s] -> [BooleanExpression:boolExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]   

[RelationalExpression[AddSubExpression:expr RelationalExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]
[RelationalExpression[AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [expr3 <- intExpr s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:expr3 SymbolTable]

[RelationalExpressionP[< AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[LessThanExpression[%IntegerExpression < intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[> AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[GreaterThanExpression[%IntegerExpression > intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[< AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[LessThanExpression[%IntegerExpression < intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]
[RelationalExpressionP[> AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[GreaterThanExpression[%IntegerExpression > intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]
[RelationalExpressionP[<= AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[LessThanOrEqExpression[%IntegerExpression <= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[>= AddSubExpression:expr1 RelationalExpressionP[EPSILON]] SymbolTable:s] -> [BooleanExpression[GreaterThanOrEqExpression[%IntegerExpression >= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
[RelationalExpressionP[<= AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[LessThanOrEqExpression[%IntegerExpression <= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]
[RelationalExpressionP[>= AddSubExpression:expr1 RelationalExpressionP:expr2] SymbolTable:s] -> [boolExpr <- BooleanExpression[GreaterThanOrEqExpression[%IntegerExpression >= intExpr]] s]
    [expr1 s] -> [IntegerExpression:intExpr SymbolTable]
    [expr2 s] -> [BooleanExpression:boolExpr SymbolTable]

[AddSubExpression[MulDivExpression:expr AddSubExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]
[AddSubExpression[MulDivExpression:expr1 AddSubExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- intExpr1 s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[AddSubExpressionP[+ MulDivExpression:expr1 AddSubExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[AddExpression[%IntegerExpression + intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[AddSubExpressionP[- MulDivExpression:expr1 AddSubExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[SubExpression[%IntegerExpression - intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[AddSubExpressionP[+ MulDivExpression:expr1 AddSubExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[AddExpression[%IntegerExpression + intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[AddSubExpressionP[- MulDivExpression:expr1 AddSubExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[SubExpression[%IntegerExpression - intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[MulDivExpression[PowExpression:expr MulDivExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]
[MulDivExpression[PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- intExpr1 s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[MulDivExpressionP[\* PowExpression:expr1 MulDivExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[MulExpression[%IntegerExpression \* intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[MulDivExpressionP[/ PowExpression:expr1 MulDivExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[DivExpression[%IntegerExpression / intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[MulDivExpressionP[\% PowExpression:expr1 MulDivExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[ModExpression[%IntegerExpression \% intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
[MulDivExpressionP[\* PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[MulExpression[%IntegerExpression \* intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[MulDivExpressionP[/ PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[DivExpression[%IntegerExpression / intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[MulDivExpressionP[\% PowExpression:expr1 MulDivExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[ModExpression[%IntegerExpression \% intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[PowExpression[PrimaryExpression:expr PowExpressionP[EPSILON]] SymbolTable:s] -> [expr1 s]
    [expr s] -> [*:expr1 SymbolTable]

[PowExpression[PrimaryExpression:expr1 PowExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- intExpr1 s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[PowExpressionP[^ PrimaryExpression:expr1 PowExpressionP[EPSILON]] SymbolTable:s] -> [IntegerExpression[PowExpression[%IntegerExpression ^ intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]

[PowExpressionP[^ PrimaryExpression:expr1 PowExpressionP:expr2] SymbolTable:s] -> [intExpr2 <- IntegerExpression[PowExpression[%IntegerExpression ^ intExpr1]] s]
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]

[PrimaryExpression[numeral:i] SymbolTable:s] -> [IntegerExpression[i1] s]
    i ->:p numeral:i1
[PrimaryExpression[identifier:id BitSelector[EPSILON]] SymbolTable:s] -> [IntegerExpression[IntegerVariable[id1]] s]
    id ->:p identifier:id1
    [id s] ->:s Variable[Type[IntType] identifier ParameterTypes[EPSILON]]
[PrimaryExpression[identifier:id BitSelector[EPSILON]] SymbolTable:s] -> [RegisterExpression[RegisterVariable[id1]] s]
    id ->:p identifier:id1
    [id s] ->:s Variable[Type[RegisterType] identifier ParameterTypes[EPSILON]]
[PrimaryExpression[identifier:id BitSelector[EPSILON]] SymbolTable:s] -> [BooleanExpression[BooleanVariable[id1]] s]
    id ->:p identifier:id1
    [id s] ->:s Variable[Type[BooleanType] identifier ParameterTypes[EPSILON]]
[PrimaryExpression[identifier:id BitSelector[{ Expression:expr }]] SymbolTable:s] -> [BooleanExpression[IndirectBitValue[RegisterVariable[id1] { intExpr }]] s]
    id ->:p identifier:id1
    [id s] ->:s Variable[Type[RegisterType] identifier ParameterTypes[EPSILON]]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]
[PrimaryExpression[( Expression:expr )] SymbolTable:s] -> [IntegerExpression[( intExpr )] s]
    [expr s] -> [IntegerExpression:intExpr SymbolTable]
[PrimaryExpression[( Expression:expr )] SymbolTable:s] -> [BooleanExpression[( boolExpr )] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
[PrimaryExpression[! PrimaryExpression:expr] SymbolTable:s] -> [BooleanExpression[NotExpression[! boolExpr]] s]
    [expr s] -> [BooleanExpression:boolExpr SymbolTable]
[PrimaryExpression[RegisterType:t ( Expression:expr ) BitSelector[EPSILON]] SymbolTable:s] -> [RegisterExpression[RegisterLiteral[t1 ( intExpr )]] s]
    t ->:p RegisterType:t1
    [expr s] -> [IntegerExpression:intExpr SymbolTable]
[PrimaryExpression[RegisterType:t ( Expression:expr1 ) BitSelector[{ Expression:expr2 }]] SymbolTable:s] -> [BooleanExpression[DirectBitValue[t1 ( intExpr1 ) { intExpr2 }]] s]
    t ->:p RegisterType:t1
    [expr1 s] -> [IntegerExpression:intExpr1 SymbolTable]
    [expr2 s] -> [IntegerExpression:intExpr2 SymbolTable]
[PrimaryExpression[true:t] SymbolTable:s] -> [BooleanExpression[t1] s]
    t ->:p true:t1
[PrimaryExpression[false:f] SymbolTable:s] -> [BooleanExpression[f1] s]
    f ->:p false:f1