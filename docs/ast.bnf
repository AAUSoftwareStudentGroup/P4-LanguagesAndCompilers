AST -> GlobalStatement eof
     | eof

GlobalStatement -> Interrupt
                 | Function
                 | CompoundGlobalStatement
                 | Statement

Interrupt -> interrupt ( numeral ) indent Statement dedent

Function -> Type identifier ( FormalParameters ) indent Statement dedent

Type -> IntType
      | RegisterType
      | BooleanType
      | nothing

FormalParameters -> FormalParameter
                  | EPSILON

FormalParameter -> Type identifier
                 | CompoundFormalParameter

CompoundFormalParameter -> FormalParameter , FormalParameter

CompoundGlobalStatement -> GlobalStatement newline GlobalStatement

Statement -> newline 
           | EPSILON
           | CompoundStatement
           | IntegerDeclaration
           | IntegerDeclarationInit
           | BooleanDeclaration
           | BooleanDeclarationInit
           | DirectBitAssignment
           | IndirectBitAssignment
           | RegisterDeclaration 
           | RegisterDeclarationInit
           | IntegerAssignment
           | BooleanAssignment
           | RegisterAssignment
           | IfStatement
           | IfElseStatement 
           | IfElseIfStatement 
           | WhileStatement
           | ForStatement
           | Call
           | IntegerReturn
           | BooleanReturn
           | RegisterReturn
           | EmptyReturn
           | InterruptStatement

CompoundStatement -> Statement newline Statement

IntegerDeclaration -> IntType identifier

IntegerDeclarationInit -> IntType identifier = IntegerExpression
           
IntegerAssignment -> identifier = IntegerExpression

BooleanDeclaration -> BooleanType identifier

BooleanDeclarationInit -> BooleanType identifier = BooleanExpression

BooleanType -> bool

BooleanAssignment -> identifier = BooleanExpression

DirectBitAssignment -> RegisterType ( IntegerExpression ) { IntegerExpression } = BooleanExpression

IndirectBitAssignment -> identifier { IntegerExpression } = BooleanExpression

RegisterDeclaration -> RegisterType identifier

RegisterDeclarationInit -> RegisterType identifier = RegisterExpression

RegisterAssignment -> identifier = RegisterExpression

RegisterExpression -> RegisterLiteral
                    | identifier
                    | Call

RegisterLiteral -> RegisterType ( IntegerExpression )

IfStatement -> if ( BooleanExpression ) indent Statement dedent 

IfElseStatement -> if ( BooleanExpression ) indent Statement dedent else indent Statement dedent

IfElseIfStatement -> if ( BooleanExpression ) indent Statement dedent else IfStatement
                   | if ( BooleanExpression ) indent Statement dedent else IfElseStatement
                   | if ( BooleanExpression ) indent Statement dedent else IfElseIfStatement
           
WhileStatement -> while ( BooleanExpression ) indent Statement dedent

ForStatement -> for ( IntType identifier from IntegerExpression to IntegerExpression ) indent Statement dedent

Call -> identifier ( ExpressionList )

IntegerReturn -> return IntegerExpression

BooleanReturn -> return BooleanExpression

RegisterReturn -> return RegisterExpression

EmptyReturn -> return

InterruptStatement -> disableinterrupts ( )
                            | enableinterrupts ( )

ExpressionList -> ExpressionListArgs
                | EPSILON
 
ExpressionListArgs -> IntegerExpression
                 | BooleanExpression
                 | RegisterExpression
                 | CompoundArgs

CompoundArgs -> ExpressionListArgs , ExpressionListArgs

IntType -> int8
         | int16
         | int32

IntegerExpression -> identifier 
                   | numeral
                   | IntegerParenthesisExpression
                   | AddExpression
                   | SubExpression
                   | MulExpression
                   | DivExpression 
                   | ModExpression
                   | PowExpression
                   | Call

IntegerParenthesisExpression -> ( IntegerExpression )        

AddExpression -> IntegerExpression + IntegerExpression

SubExpression -> IntegerExpression - IntegerExpression

MulExpression -> IntegerExpression * IntegerExpression

DivExpression -> IntegerExpression / IntegerExpression

ModExpression -> IntegerExpression % IntegerExpression

PowExpression -> IntegerExpression ^ IntegerExpression

BooleanExpression -> true 
                   | false 
                   | identifier
                   | DirectBitValue
                   | IndirectBitValue
                   | BooleanParenthesisExpression
                   | IntegerEqExpression 
                   | BooleanEqExpression 
                   | RegisterEqExpression 
                   | BooleanNotEqExpression
                   | IntegerNotEqExpression
                   | RegisterNotEqExpression
                   | LessThanExpression 
                   | GreaterThanExpression
                   | LessThanOrEqExpression
                   | GreaterThanOrEqExpression
                   | NotExpression 
                   | AndExpression 
                   | OrExpression
                   | Call

DirectBitValue -> RegisterType ( IntegerExpression ) { IntegerExpression }

RegisterType -> register8
              | register16

IndirectBitValue -> identifier { IntegerExpression }

BooleanParenthesisExpression -> ( BooleanExpression )

IntegerEqExpression -> IntegerExpression == IntegerExpression

BooleanEqExpression -> BooleanExpression == BooleanExpression

RegisterEqExpression -> RegisterExpression == RegisterExpression

IntegerNotEqExpression -> IntegerExpression != IntegerExpression

BooleanNotEqExpression -> BooleanExpression != BooleanExpression

RegisterNotEqExpression -> RegisterExpression != RegisterExpression

LessThanExpression -> IntegerExpression < IntegerExpression

GreaterThanExpression -> IntegerExpression > IntegerExpression

LessThanOrEqExpression -> IntegerExpression <= IntegerExpression

GreaterThanOrEqExpression -> IntegerExpression >= IntegerExpression

NotExpression -> ! BooleanExpression

AndExpression -> BooleanExpression and BooleanExpression

OrExpression -> BooleanExpression or BooleanExpression